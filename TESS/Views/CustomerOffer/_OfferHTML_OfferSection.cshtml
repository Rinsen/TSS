@{
    Layout = null;
}

@using TietoCRM.Models;
@using System.Globalization;

<div id="crm-pdf-offer-head">
    <p><strong id="Document_head">@Html.Raw(@ViewBag.CustomerOffer.Document_head)</strong></p>
    <div id="Page_head">@Html.Raw(@ViewBag.CustomerOffer.Page_head)</div>
</div>

@PrintListContent(ViewBag.ArticleSystemDictionary, "Produkter")


@PrintConsultantServices(ViewBag.CustomerOffer._ConsultantRows, "Tjänster")

<!-- Help printing functinos -->

@helper PrintListContent(List<KeyValuePair<String, List<dynamic>>> list, String title)
{
    // CultureInfo for swedish currency print out 
    CultureInfo se = CultureInfo.CreateSpecificCulture("sv-SE");
    
    bool toBeSummerized = (ViewBag.CustomerOffer.Summera == 1);
    bool krEveryRow = (ViewBag.Representative.Kr_every_row == 1 ? true : false);
    string krRow = (krEveryRow ? " kr" : "");
    string krRub = (krEveryRow ? "" : " kr");
    string rubEng = (krEveryRow ? "Engångsavgift" : "Engångs- avgift kr");
    string subh1 = (krEveryRow ? "crm-pdf-subheader_1" : "crm-pdf-subheader_1-rubkr");
    string subh2 = (krEveryRow ? "crm-pdf-subheader_2" : "crm-pdf-subheader_2-rubkr");
    string subr2 = (krEveryRow ? "crm-pdf-subrows_2" : "crm-pdf-subrows_2-rubkr");
    string subr3 = (krEveryRow ? "crm-pdf-subrows_3" : "crm-pdf-subrows_3-rubkr");
    string subs1 = (krEveryRow ? "crm-pdf-subsum_1" : "crm-pdf-subsum_1-rubkr");


    if (list.Count > 0)
    {
        decimal discountsMP = 0;
        decimal discountsLP = 0;
        decimal discountsLM = 0;
        decimal discountsMM = 0;
        decimal ProductLicenseTotal = 0;
        decimal ProductMaintenanceTotal = 0;
        bool uhManFinns = false;
        bool summera = true;

   
        int systemCount = 0;

        String previousPriceType = "";
        String currentPriceType = "";


        bool canShowTitle = true;
        bool hasDiscounts = false;


        <div id="crm-pdf-offer-rows" class="">
       
        @foreach (KeyValuePair<String, List<dynamic>> system in list)
        {
            // Get next Price_type
            String nextPriceType = "";
            int nextIndex = systemCount + 1;
            if (nextIndex < list.Count)
            {
                nextPriceType = list[nextIndex].Value[0].Price_type;
            }

            for (int i = 0; i < system.Value.Count; i++)
            {
                var article = system.Value[i];
                currentPriceType = article.Price_type;
                if (i == 0)
                {
                    <div class="@subh1" style="page-break-inside:avoid" id="crm-pdf-module-rows-title">
                        <table>
                            <tr>
                                <td>
                                    @if(canShowTitle)
                                    {
                                        canShowTitle = false;
                                        <span style="font-size: 10pt; font-weight: bold">@title</span>
                                    }
                                </td>
                                <td></td>
                                @if (currentPriceType != previousPriceType)
                                {   // Print Price_type only if it differs from previous
                                    <td>@rubEng</td>
                                    <td>@article.Price_type @krRub</td>
                                }
                                else
                                {
                                    <td></td>
                                    <td></td>
                                }

                            </tr>
                        </table>
                    </div>
                    <div class="large-divider"></div>
                }

                String License = "";
                String Maintenance = "";
                // Format currency
                if(((IDictionary<String, object>)article).ContainsKey("Discount")) // Handle Discounts
                {
                    hasDiscounts = true;
                    if (article.Discount != 1 || article.Discount_type == 0)
                    {
                        if ((article.License % 1) == 0)
                        {
                            License = string.Format(se, "{0:C0}", article.License).Replace(".", " ");
                        }
                        else
                        {
                            License = string.Format(se, "{0:C2}", article.License).Replace(".", " ");
                        }

                        if ((article.Maintenance % 1) == 0)
                        {
                            Maintenance = string.Format(se, "{0:C0}", article.Maintenance).Replace(".", " ");
                        }
                        else
                        {
                            Maintenance = string.Format(se, "{0:C2}", article.Maintenance).Replace(".", " ");
                        }
                        if (article.Discount == 1)
                        {
                            discountsLM += article.License;
                            discountsMM += article.Maintenance;
                        }
                        else
                        {
                            ProductLicenseTotal += Convert.ToDecimal(article.License);
                            if (summera == true)
                            {
                                ProductMaintenanceTotal += Convert.ToDecimal(article.Maintenance);
                            }
                        }
                        if (!krEveryRow)
                        {
                            License = License.Replace(" kr", "");
                            Maintenance = Maintenance.Replace(" kr", "");
                        }

                    }
                    else
                    {
                        discountsLP += article.License;
                        discountsMP += article.Maintenance;
                        License = (int)article.License + "%";
                        Maintenance = (int)article.Maintenance + "%";
                    }
                }
                else
                {
                    if ((article.License % 1) == 0)
                    {
                        License = string.Format(se, "{0:C0}", article.License).Replace(".", " ");
                    }
                    else
                    {
                        License = string.Format(se, "{0:C2}", article.License).Replace(".", " ");
                    }

                    if ((article.Maintenance % 1) == 0)
                    {
                        Maintenance = string.Format(se, "{0:C0}", article.Maintenance).Replace(".", " ");
                    }
                    else
                    {
                        Maintenance = string.Format(se, "{0:C2}", article.Maintenance).Replace(".", " ");
                    }
                    if (!krEveryRow)
                    {
                        License = License.Replace(" kr", "");
                        Maintenance = Maintenance.Replace(" kr", "");
                    }
                    ProductLicenseTotal += article.License;
                    ProductMaintenanceTotal += article.Maintenance;
                }

                // Print System header for article groups
                if ( i == 0 )
                {
                    <div class="crm-pdf-subrows_1">
                        <table>
                            <tr>
                                <td>@article.System</td>
                            </tr>
                        </table>
                    </div>
                }
                <div class="@subr2" style="page-break-inside:avoid">
                    <table>
                        <tr>
                            <td>@article.Article_number</td>
                            <td>@article.Classification.Replace("amp;", "")</td>
                            <td>@article.Module.Replace("amp;", "")</td>
                            <td>@License</td>
                            <td>@Maintenance</td>
                        </tr>
                    </table>
                </div>

                previousPriceType = article.Price_type;
            }
            if(hasDiscounts)
            {
                if (discountsMP < -100)
                {
                    discountsMP = -100;
                }
                if (discountsLP < -100)
                {
                    discountsLP = -100;
                }

                ProductLicenseTotal += discountsLM;
                ProductMaintenanceTotal += discountsMM;
                discountsLM = 0;
                discountsMM = 0;
            }


            // Format currency for total sums
            String ProductLicenseTotalFormated;
            String ProductMaintenanceTotalFormated;
            if ((ProductLicenseTotal % 1) == 0)
            {
                ProductLicenseTotalFormated = string.Format(se, "{0:C0}", ProductLicenseTotal + ProductLicenseTotal * (decimal)discountsLP / 100).Replace(".", " ");
            }
            else
            {
                ProductLicenseTotalFormated = string.Format(se, "{0:C2}", ProductLicenseTotal + ProductLicenseTotal * (decimal)discountsLP / 100).Replace(".", " ");
            }
            if ((ProductMaintenanceTotal % 1) == 0)
            {
                ProductMaintenanceTotalFormated = string.Format(se, "{0:C0}", ProductMaintenanceTotal + ProductMaintenanceTotal * (decimal)discountsMP / 100).Replace(".", " ");
            }
            else
            {
                ProductMaintenanceTotalFormated = string.Format(se, "{0:C2}", ProductMaintenanceTotal + ProductMaintenanceTotal * (decimal)discountsMP / 100).Replace(".", " ");
            }
            if (!krEveryRow)
            {
                ProductLicenseTotalFormated = ProductLicenseTotalFormated.Replace(" kr", "");
                ProductMaintenanceTotalFormated = ProductMaintenanceTotalFormated.Replace(" kr", "");
            }

            // Show summerization if next Price_type differs from current and summerization is enabled.
            if (nextPriceType != currentPriceType && toBeSummerized)
            {
                <span class="large-divider"></span>
                <div class="@subs1" style="page-break-inside:avoid">
                    <table>
                        <tr>
                            <td></td>
                            <td>Summa</td>
                            <td>@ProductLicenseTotalFormated</td>
                            <td>@ProductMaintenanceTotalFormated</td>
                        </tr>
                    </table>
                </div>
                ProductLicenseTotal = 0;
                ProductMaintenanceTotal = 0;
            }
            systemCount++;
        }
       
    </div>
    }
}



@helper PrintConsultantServices(List<view_ConsultantRow> consultantRows, String title)
{
    // CultureInfo for swedish currency print out 
    CultureInfo se = CultureInfo.CreateSpecificCulture("sv-SE");
    bool toBeSummerized = (ViewBag.CustomerOffer.Summera == 1);
    bool krEveryRow = (ViewBag.Representative.Kr_every_row == 1 ? true : false);
    string krRow = (krEveryRow ? " kr" : "");
    string krRub = (krEveryRow ? "" : " kr");
    string rubEng = (krEveryRow ? "Engångsavgift" : "Engångs- avgift kr");
    string subh1 = (krEveryRow ? "crm-pdf-subheader_1" : "crm-pdf-subheader_1-rubkr");
    string subh2 = (krEveryRow ? "crm-pdf-subheader_2" : "crm-pdf-subheader_2-rubkr");
    string subr2 = (krEveryRow ? "crm-pdf-subrows_2" : "crm-pdf-subrows_2-rubkr");
    string subr3 = (krEveryRow ? "crm-pdf-subrows_3" : "crm-pdf-subrows_3-rubkr");
    string subs1 = (krEveryRow ? "crm-pdf-subsum_1" : "crm-pdf-subsum_1-rubkr");

    if (consultantRows.Count > 0)
    {
        decimal ServicesTotal = 0;
        @*-------------------------------------
        Konsulttjänster
        -------------------------------------*@
        <div id="crm-pdf-service-rows">
        <div class="@subh2" style="page-break-inside:avoid">
            <table>
                <tr>
                    <td>
                        <span style="font-size: 10pt; font-weight: bold">@title</span>
                    </td>
                    <td>Antal</td>
                    <td>Àpris @krRub</td>
                    <td>Summa @krRub</td>
                </tr>
            </table>
        </div>
        <div class="large-divider"></div>
   
        @foreach (view_ConsultantRow cr in consultantRows)
        {
            // Fetch Service from DB
            view_Module service = new view_Module();
            service.Select("Article_number = " + cr.Code);
            if (!String.IsNullOrEmpty(cr.Alias))
            {
                service.Module = cr.Alias;
            }

            // Calculate total sums
            ServicesTotal += Convert.ToDecimal(cr.Total_price);


            // Format currency
            decimal? totPrice = cr.Amount != 0 ? (cr.Total_price / cr.Amount) : 0;
            String Price;
            String TotalPrice;
            if ((totPrice % 1) == 0)
            {
                Price = string.Format(se, "{0:C0}", totPrice).Replace(".", " ");
            }
            else
            {
                Price = string.Format(se, "{0:C2}", totPrice).Replace(".", " ");
            }
            if ((cr.Total_price % 1) == 0)
            {
                TotalPrice = string.Format(se, "{0:C0}", cr.Total_price).Replace(".", " ");
            }
            else
            {
                TotalPrice = string.Format(se, "{0:C2}", cr.Total_price).Replace(".", " ");
            }
            if (!krEveryRow)
            {
                Price = Price.Replace(" kr", "");
                TotalPrice = TotalPrice.Replace(" kr", "");
            }
            <div class="@subr3" style="page-break-inside:avoid">
                <table>
                    <tr>
                        <td>@service.Article_number</td>
                        <td>@service.Module.Replace("amp;", "")</td>
                        <td>@cr.Amount</td>
                        <td>@Price</td>
                        <td>@TotalPrice</td>
                    </tr>
                </table>
            </div>
        }
        @{
            // Format currency for total sums
            String ServicesTotalFormated;
            if ((ServicesTotal % 1) == 0)
            {
            ServicesTotalFormated = string.Format(se, "{0:C0}", ServicesTotal).Replace(".", " ");
            }
            else
            {
            ServicesTotalFormated = string.Format(se, "{0:C2}", ServicesTotal).Replace(".", " ");
            }
            if (!krEveryRow)
            {
            ServicesTotalFormated = ServicesTotalFormated.Replace(" kr", "");
            }
        }
        @if (toBeSummerized)
        {
            <span class="large-divider"></span>
            <div class="@subs1" style="page-break-inside:avoid">
                <table>
                    <tr>
                        <td></td>
                        <td>Summa: </td>
                        <td></td>
                        <td>@ServicesTotalFormated</td>
                    </tr>
                </table>
            </div>
        }
        </div>
    }
    <div id="crm-pdf-module-info">
        <div id="Module_header">@Html.Raw(@ViewBag.CustomerOffer.Module_header)</div>
        <div id="Module_info">@Html.Raw(@ViewBag.CustomerOffer.Module_info)</div>
    </div>

}