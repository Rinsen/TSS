@using TietoCRM.Extensions;
@using TietoCRM.Models;
<row>
        <div class="col-md-12">
            <form class="form-inline">
                <div class="form-group" id="div-user">
                    <label for="crm-select-user">Our Salesman:</label>
                    <select name="user" id="crm-select-user" class="form-control selectpicker" data-live-search="true">
                        <option selected value="*">All</option>
                        @foreach (TietoCRM.Models.view_User User in ViewBag.Users)
                        {
                            @*if (ViewBag.CurrentUser == User.Sign)
                            {
                                <option selected value="@User.Sign">@User.Name</option>
                            }
                            else
                            {*@
                                <option value="@User.Sign">@User.Name</option>
                            @*}*@
                        }
                    </select>
                </div>
                <div class="form-group" id="div-customer">
                    <label for="crm-select-customer">Customer:</label>
                    <select name="customer" id="crm-select-customer" class="form-control selectpicker" data-live-search="true">
                        <option value="*">All</option>
                        <option selected value="@ViewBag.SelectedCustomer">@ViewBag.SelectedCustomer</option>
                        @foreach (String Customer in ViewBag.Customers)
                        {
                            <option value="@Customer">@Customer</option>
                        }
                    </select>
                </div>
                    <button type='button' style="margin-top: 1.7em;" class='btn btn-default form-inline' data-toggle="modal" id='appointment-modal-button' onclick="openModal();">Appointment</button>
                    <div id='crm-edit-contact' class='crm-table-btn'>
                        <button type='button' style="margin-top: 1.7em;" class='btn btn-default' data-toggle="modal" id="contact-modal-button" onclick="loadContactData()">Edit contact</button>
                    </div>
                    <button type='button' style="margin-top: 1.7em; display:none" class='btn btn-warning form-inline' data-toggle="modal" id='remind-modal-button' onclick="loadReminders()">Reminder</button>
            </form>
        </div>
</row>
<table draggable="true" id="@ViewBag.ControllerName-table" class="table table-bordered table-hover" data-url="data1.json" data-height="299" data-sort-name="Valid_from" data-sort-order="desc">
    <thead>
        <tr>
            <th data-field="#" data-sortable="false">#</th>
            @foreach (System.Reflection.PropertyInfo property in ViewBag.Properties)
            {
                if (!property.Name.StartsWith("_") && !ViewBag.SkipProperties.Contains(property.Name) && !property.Name.StartsWith("OrgInfoId"))
                {
                    String PropertyName = property.Name.Replace("_", " ");
                    <th data-field="@property.Name" data-sortable="true">@PropertyName</th>
                }
                else if (property.Name == "_HashtagList")
                {
                    String PropertyName = property.Name.Replace("_", " ");
                    <th class="hidden" data-field="@property.Name" data-sortable="true">@PropertyName</th>
                }
            }
        </tr>
    </thead>
</table>
@*<div class="bottom-wrapper" style="margin-top:30px; margin-bottom:30px">*@

<div class="modal fade bs-example-modal-lg" data-backdrop="static" id="reminderModal" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel">
    <div class="modal-dialog reminders-modal" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Reminders on customer</h4>
            </div>
            <div id="reminder-modal" class="modal-body">
                <form class="form-inline" id="reminders-form">
                    <table class="table table-striped table-bordered" id="reminder-table">
                        <thead>
                            <tr>
                                <th>Start date</th>
                                <th>Reminder text</th>
                                <th>Sign</th>
                                <th>Deactivate</th>
                            </tr>
                        </thead>
                        <tbody class="reminder-body"></tbody>
                    </table>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" id="save-reminders" class="btn btn-primary">Save</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade bs-example-modal-lg" data-backdrop="static" id="contactModal" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel">
    <div class="modal-dialog contact-modal" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Edit Contact</h4>
            </div>
            <div id="contact-modal" class="modal-body">
                <div class="form-inline">
                    <select id="crm-contact-select" class="form-control selectpicker" data-live-search="true"></select>
                </div>
                <br />
                <form class="form-horizontal">
                    <div class="form-group">
                        <label for="fullName3" class="col-sm-2 control-label">Full name</label>
                        <div class="col-sm-10">
                            <input class="form-control" name="Contact_person" id="fullName3" placeholder="Full name">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="title3" class="col-sm-2 control-label">Title</label>
                        <div class="col-sm-10">
                            <input class="form-control" name="Title" id="title3" placeholder="Title">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="inputEmail3" class="col-sm-2 control-label">Email</label>
                        <div class="col-sm-10">
                            <input class="form-control" name="Email" id="inputEmail3" placeholder="Email">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="phoneNumber3" class="col-sm-2 control-label">Phone number</label>
                        <div class="col-sm-10">
                            <input class="form-control" id="phoneNumber3" placeholder="Phone number">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="mobileNumber3" class="col-sm-2 control-label">Mobile number</label>
                        <div class="col-sm-10">
                            <input class="form-control" id="mobileNumber3" placeholder="Mobile number">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="address3" class="col-sm-2 control-label">Address</label>
                        <div class="col-sm-10">
                            <input class="form-control" id="address3" placeholder="Address">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="notes3" class="col-sm-2 control-label">Notes</label>
                        <div class="col-sm-10">
                            <input class="form-control" id="notes3" placeholder="Notes">
                        </div>
                    </div>
                    <div class="form-group" style="margin-bottom:-5px">
                        <div class="col-sm-offset-2 col-sm-10">
                            <button id="create-contact-button" class="btn btn-default">Create</button>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" id="save-contact-changes" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade bs-example-modal-lg" data-backdrop="static" id="appointmentModal" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel">
    <div class="modal-dialog appointment-modal" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">View my appointments</h4>
            </div>
            <div id="appointment-modal" class="modal-body">
                <h5>Appointments for the next 30 days</h5>
                <table class="table table-striped table-bordered" id="appointment-table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Event type</th>
                            <th>Title</th>
                            <th>Text</th>
                            <th>Contact person</th>
                        </tr>
                    </thead>
                    <tbody class="appointment-body">
                        @{
                            List<TietoCRM.Models.view_Appointment> appointments = ViewBag.Appointments;
                            TietoCRM.Models.view_Appointment appt = null;
                            if (appointments.Count > 0)
                            {
                                appt = appointments[appointments.Count - 1];
                                appointments.RemoveAt(appointments.Count - 1);
                            }
                        }
                        @foreach (TietoCRM.Models.view_Appointment app in appointments)
                        {
                            <tr>
                                <td class='appointment-date'>@app.Date.ToString("yyyy-MM-dd HH:mm")</td>
                                <td class='appointment-event-type'>@app.Event_type</td>
                                <td class='appointment-title'>@app.Title</td>
                                <td class='appointment-text'>@app.Text</td>
                                <td class='appointment-contact-person'>@app.Contact_person</td>
                            </tr>
                        }
                    </tbody>
                </table>
                <h5>Last meeting with this customer</h5>
                <table class="table table-striped table-bordered" id="appointment-table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Event type</th>
                            <th>Title</th>
                            <th>Text</th>
                            <th>Contact person</th>
                        </tr>
                    </thead>
                    <tbody id="last-appointment" class="appointment-body">
                        @{
                            if (appointments.Count > 0 && appt != null)
                            {
                                <tr>
                                    <td class='appointment-date'>@appt.Date.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td class='appointment-event-type'>@appt.Event_type</td>
                                    <td class='appointment-title'>@appt.Title</td>
                                    <td class='appointment-text'>@appt.Text</td>
                                    <td class='appointment-contact-person'>@appt.Contact_person</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade bs-example-modal-lg" data-backdrop="static" id="newRowModal" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel">
    <div class="modal-dialog contract-modal" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">New contract</h4>
            </div>
            <div id="new-contract-modal" class="modal-body">

                <form class="form-horizontal">
                    <table style="width: 100%;">
                        <tr>
                            @{
                                int count = 0;
                                foreach (System.Reflection.PropertyInfo pi in ViewBag.Properties)
                                {
                                    if (pi.Name != "SSMA_timestamp" && !pi.Name.StartsWith("_")
                                        && !ViewBag.SkipProperties.Contains(pi.Name) && pi.Name != "Area"
                                        && pi.Name != "Contract_id")
                                    {

                                        String pName = pi.Name.Replace("_", " ");

                                        if (count == 0 || count == 8)
                                        {
                                            @Html.Raw("<td valign=\"top\" style=\"width:50%\">")
                                        }

                                        <div class="form-group">
                                            @if(pName == "OrgInfoId")
                                            {
                                                <label for="@pi.Name.ToLower()-select" style="font-size: 12px" class="col-sm-3 control-label">Organisation</label>
                                            }
                                            else
                                            {
                                                <label for="@pi.Name.ToLower()-text" style="font-size: 12px" class="col-sm-3 control-label">@pName</label>
                                            }
                                            <div class="col-sm-9">
                                                @if (pi.PropertyType == typeof(bool?) || pi.PropertyType == typeof(bool))
                                                {
                                                    <select class="form-control" id="@pi.Name.ToLower()-text" name="@pi.Name">
                                                        <option value="true">true</option>
                                                        <option value="false">false</option>
                                                    </select>
                                                }
                                                else if (pi.Name == "Status")
                                                {
                                                    <select class="form-control selectpicker" id="@pi.Name.ToLower()-text" name="@pi.Name">
                                                        @foreach (String status in ViewBag.Statuses)
                                                        {
                                                            <option value="@status">@status</option>
                                                        }
                                                    </select>
                                                }
                                                else if (pi.Name == "Contract_type")
                                                {
                                                    <select class="form-control selectpicker" id="@pi.Name.ToLower()-select" name="@pi.Name">
                                                        @foreach (String types in ViewBag.ContractTypes)
                                                        {
                                                            <option value="@types">@types</option>
                                                        }
                                                    </select>
                                                }
                                                else if (pi.Name == "Contact_person" || pi.Name == "Main_contract_id")
                                                {
                                                    <select class="form-control selectpicker" id="@pi.Name.ToLower()-select" name="@pi.Name"></select>
                                                }

                                                else if (pi.Name == "Summera")
                                                {
                                                    <div class="checkbox">
                                                        <label>
                                                            <input id="@pi.Name.ToLower()" data-id="@pi.Name.ToLower()" name="Summera" type="checkbox" />
                                                        </label>
                                                    </div>
                                                }
                                                else if (pi.Name == "OrgInfoId")
                                                {
                                                    <select class="form-control selectpicker" id="@pi.Name.ToLower()-select" name="@pi.Name">
                                                        @foreach (view_OrganisationInformation org in ViewBag.Organisations)
                                                        {
                                                            if (org.IsDefaultValue)
                                                            {
                                                                <option selected value="@org._ID">@org.CompanyName - @org.OrgNo (Default)</option>
                                                            }
                                                            else
                                                            {
                                                                <option value="@org._ID">@org.CompanyName - @org.OrgNo</option>
                                                            }
                                                        }
                                                    </select>
                                                    <label style="text-align:left" class="col-sm-12">
                                                        <input checked id="defaultorg" data-id="defaultorg" name="DefaultOrg" type="checkbox" />
                                                        Default Organisation (refers to all customers)
                                                    </label>
                                                }
                                                else
                                                {
                                                    String inputType = "";
                                                    String inputVal = "";
                                                    if (pi.PropertyType == typeof(DateTime?))
                                                    {
                                                        inputType = "date";
                                                        if (pi.Name == "Valid_through")
                                                        {
                                                            inputVal = DateTime.Now.AddYears(3).ToShortDateString();
                                                        }
                                                        else
                                                        {
                                                            if (pi.Name == "Expire")
                                                            {
                                                                inputVal = "";
                                                            }
                                                            else
                                                            {
                                                                inputVal = DateTime.Now.AddMonths(3).ToShortDateString();
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        inputType = "text";
                                                    }
                                                    <input class="form-control" type="@inputType" id="@pi.Name.ToLower()-@inputType" name="@pi.Name" placeholder="@pName" value="@inputVal" />
                                                }

                                            </div>
                                        </div>
                                        if (count == 7 || count == ViewBag.Properties.Length - 1)
                                        {
                                            if (count == 4)
                                            {
                                                <div class="form-group">
                                                    <label for="hashtags-text" style="font-size: 12px" class="col-sm-3 control-label">Tags</label>
                                                    <div class="col-sm-9">
                                                        <input class="form-control" type="text" id="hashtags-text" name="Hashtags" placeholder="Hashtags" value="" />
                                                    </div>
                                                </div>
                                            }
                                            @Html.Raw("</td>")
                                        }
                                        count++;
                                    }

                                }
                            }
                        </tr>
                    </table>

                </form>
            </div>
            <div class="modal-footer">
                @*<button type="button" id="set-defaults-btn" class="btn btn-default">Set defaults</button>*@
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" id="create-contract-btn" class="btn btn-primary">Save and Preview</button>
            </div>
        </div>
    </div>
</div>


<!--
    Script for new contract modal

    Script for new contract modal
-->
<script>
    var serverPrefix = "@Url.Content("~/")";
    //var summera = "@Html.Raw(ViewBag.Summera)";

    var setDefaultValues = function(){
        //validator.resetForm();
        var myDate = new Date();
        var myDate3 = new Date();
        var myDate3m = new Date();
        myDate3.setYear(myDate3.getFullYear() + 3);
        myDate3m.setYear(myDate3m.getFullYear() + 3);
        myDate3m.setMonth(myDate3m.getMonth() - 3);
        $("#observation-date").prop("disabled",false);
        $("#status-text").val("Sänt");


        if ($("#contract_type-select").val() == "Modulavslut")
        {
            $("#main_contract_id-select").prop("disabled",true);
            $("#main_contract_id-select").html("");
            $("#valid_through-date").val("");
            $("#valid_from-date").val($.datepicker.formatDate('yy-mm-dd',myDate));
            $("#expire-date").val("");
            $("#observation-date").val("");
            $("#term_of_notice-text").val("");
            $("#option_date-date").val("");
            $("#summera").prop("checked", (@ViewBag.Summera == 1 ? true : false));
            $("#valid_through-date").prop("disabled",true);
            $("#expire-date").prop("disabled",true);
            $("#observation-date").prop("disabled",true);
            $("#term_of_notice-text").prop("disabled",true);
            $("#option_date-date").prop("disabled",true);
            $("#extension-text").prop("disabled",true);
            $("#summera-text").prop("disabled",false);
        }

        if ($("#contract_type-select").val() == "Tjänsteavtal" || $("#contract_type-select").val() == "Tilläggsavtal")
        {
            $("#main_contract_id-select").prop("disabled",false);
            $("#main_contract_id-select").html("");
            $("#valid_through-date").val("");
            $("#valid_from-date").val($.datepicker.formatDate('yy-mm-dd',myDate));
            $("#expire-date").val("");
            $("#observation-date").val("");
            $("#term_of_notice-text").val("");
            $("#option_date-date").val("");
            $("#summera").prop("checked", (@ViewBag.Summera == 1 ? true : false));
            $("#valid_through-date").prop("disabled",false);
            $("#expire-date").prop("disabled",false);
            $("#observation-date").prop("disabled",false);
            $("#term_of_notice-text").prop("disabled",false);
            $("#option_date-date").prop("disabled",false);
            $("#extension-text").prop("disabled",false);
            $("#summera-text").prop("disabled",false);
            loadMainContracts();
        }

        if ($("#contract_type-select").val() == "Huvudavtal" || $("#contract_type-select").val() == null) {
            $("#contract_type-select").val("Huvudavtal");
            $("#main_contract_id-select").prop("disabled","disabled");
            $("#main_contract_id-select").html("");
            $("#valid_through-date").val($.datepicker.formatDate('yy-mm-dd',myDate3));
            $("#valid_from-date").val($.datepicker.formatDate('yy-mm-dd',myDate));
            $("#expire-date").val("");
            $("#term_of_notice-text").val("3");
            $("#observation-date").val($.datepicker.formatDate('yy-mm-dd',myDate3m));
            $("#option_date-date").val("");
            $("#summera").prop("checked", (@ViewBag.Summera == 1 ? true : false));
            $("#valid_through-date").prop("disabled",false);
            $("#expire-date").prop("disabled",false);
            $("#observation-date").prop("disabled",false);
            $("#term_of_notice-text").prop("disabled",false);
            $("#option_date-date").prop("disabled",false);
            $("#extension-text").prop("disabled",false);
            $("#summera-text").prop("disabled",false);
        }
        $("#main_contract_id-select").selectpicker('refresh');
    }

    var checkReminder = function(customer, showModal){
        $.ajax({
            "url": serverPrefix + "CustomerContract/checkReminder/",
            "type": "POST",
            "data": {
                "customer": customer,
                "customerquerystr": "@Request.QueryString["customer"]"
            },
            "success": function(data){
                if (data == "1") {
                    $("#remind-modal-button").show();
                    loadReminders();
                    if (showModal == true) {
                        $("#reminderModal").appendTo("body").modal("show").draggable();
                    }
                }
                else if (data == "2"){
                    $("#remind-modal-button").show();
                    loadReminders();
                }
                else {
                    $("#remind-modal-button").hide();
                }
            }
        });
    }

    var reCalcObservationDate = function(){
        if (!isNaN($("#term_of_notice-text").val())) {      // Om Term Of Notice är numeriskt (Not icke-numeriskt)
            if (isNaN($("#valid_through-date").val())) {    //Om inte valid_through är numeriskt (dvs ett datum) ska det beräknas
                var myDate = new Date($("#valid_through-date").val());
                myDate.setMonth(myDate.getMonth() - $("#term_of_notice-text").val());
                $("#observation-date").val($.datepicker.formatDate('yy-mm-dd',myDate));
            }
            else {
                if (isNaN($("#expire-date").val())) {    //Om inte Expire är numeriskt (dvs ett datum) ska det beräknas
                    var myDate = new Date($("#expire-date").val());
                    myDate.setMonth(myDate.getMonth() - $("#term_of_notice-text").val());
                    $("#observation-date").val($.datepicker.formatDate('yy-mm-dd',myDate));
                }
            }
        }
    }

    $("#expire-date").change(function(){
        var myDate = new Date();
        var myDate3 = new Date();
        var myDate3m = new Date();
        myDate3.setYear(myDate3.getFullYear() + 3);
        myDate3m.setMonth(myDate3.getMonth() + 3);
        if (isNaN($("#expire-date").val())) {
            $("#valid_through-date").val("");
            $("#term_of_notice-text").val("");
        }
        else {
            $("#valid_through-date").val($.datepicker.formatDate('yy-mm-dd',myDate3));
            $("#term_of_notice-text").val("3");
            $("#observation-date").val($.datepicker.formatDate('yy-mm-dd',myDate3m));
        }
    });

    $("#term_of_notice-text").change(function(){
        reCalcObservationDate();
    });

    $("#valid_through-date").change(function(){
        reCalcObservationDate();
    });

    $("#contract_type-select").change(function(){
        setDefaultValues();
        //var myDate = new Date();
        //var myDate3 = new Date();
        //myDate3.setYear(myDate3.getFullYear() + 3);
        //if($(this).val() == "Huvudavtal"){
        //    $("#main_contract_id-select").prop("disabled","disabled");
        //    $("#valid_through-date").val($.datepicker.formatDate('yy-mm-dd',myDate3));
        //    $("#valid_from-date").val($.datepicker.formatDate('yy-mm-dd',myDate));
        //}
        //else {
        //    $("#main_contract_id-select").prop("disabled",false);
        //    $("#valid_through-date").val("");
        //    $("#valid_from-date").val("");
        //}
    });

    var $customerSelect = $("#crm-select-customer");
    var $userelect = $("#crm-select-user");
    var loadMainContracts = function() {
        $.ajax({
            "url": "@Url.Content("~/CustomerContract/GetMainContracts/")",
            "type": "POST",
            "data": {
                "customer": $customerSelect.val(),
                "our_sign": $userSelect.val()
            },
            "success": function(data){
                console.log(data);
                var mainIds = JSON.parse(data);
                $select = $("#main_contract_id-select");
                $select.html("");

                if(mainIds.length > 0){
                    for(var i = 0; i < mainIds.length; i++)
                    {
                        var mainID = mainIds[i];
                        $select.append($("<option></option>").attr("value", mainID).html(mainID));
                    }
                } else {
                    $select.append($("<option></option>").attr("value", "ignore").html("No \"Giltiga\" Main Contracts found."));
                }

                $select.selectpicker('refresh');
            }
        });
    }

    var loadNewContactData = function()
    {
        var $select = $("#contact_person-select");
        $.ajax({
            "url": "@Url.Content("~/CustomerContract/GetContacts/")",
            "type": "POST",
            "data": {
                "customer": $customerSelect.val()
            },
            "success": function(data){
                currentPerson = JSON.parse(data);
                $select.html("");

                for(var i = 0; i < currentPerson.length; i++)
                {
                    var person = currentPerson[i];
                    $select.append($("<option></option>").attr("innerText", person.Contact_person).html(person.Contact_person));

                }
                $select.selectpicker('refresh');
            }
        });
    }

    $("#set-defaults-btn").click(function(){
        $("#contract_type-select").val("Huvudavtal");
        $("#extension-text").val("");
        setDefaultValues();
    });

    var loadAppointments = function()
    {
        $.ajax({
            "url": serverPrefix + "Appointment/GetAppointments/",
            "type": "POST",
            "data": {
                "customer": $customerSelect.val()
            },
            "success": function(data){
                insertAppointmentToHtml(JSON.parse(data));
            }
        });
    }

    var insertAppointmentToHtml = function(json){
        $newRows = $(".appointment-body");
        $newRows.empty();
        $newRows.html("");
        $newRows.append("<tbody>");
        var lastVisit;
        if(json.length > 0){
            lastVisit = json[json.length - 1];
            json.splice(json.length - 1, 1);
        }

        for(var i = 0; i < json.length; i++)
        {
            var appointment = json[i];

            var $row = $("<tr>                                                                                                \
                                    <td class='appointment-date'>" + appointment.Date + "</td>                                   \
                                    <td class='appointment-event-type'>" + appointment.Event_type + "</td>         \
                                    <td class='appointment-title'>" + appointment.Title + "</td>         \
                                    <td class='appointment-text'>" + appointment.Text + "</td>         \
                                    <td class='appointment-contact-person'>" + appointment.Contact_person + "</td>         \
                                </tr>");
            $newRows.append($row);
        }
        $newRows.append("<tbody>");

        $newRow = $("#last-appointment");
        $newRow.empty();
        $newRow.html("");
        $newRow.append("<tbody>");
        if(json.length > 0 && lastVisit != null){
            var $row = $("<tr>                                                                                                \
                        <td class='appointment-date'>" + lastVisit.Date + "</td>                                   \
                        <td class='appointment-event-type'>" + lastVisit.Event_type + "</td>         \
                        <td class='appointment-title'>" + lastVisit.Title + "</td>         \
                        <td class='appointment-text'>" + lastVisit.Text + "</td>         \
                        <td class='appointment-contact-person'>" + lastVisit.Contact_person + "</td>         \
                    </tr>");
            $newRow.append($row);
        }
        $newRow.append("<tbody>");
    }

    $("#create-contract-btn").click(function(){

        if ($("#new-contract-modal form").valid()) {
            var newContract = {}
            var defaultOrg = "";

            var $formInputs = $("#newRowModal form").find(":input");
            var hashtags = "";
            var frmInpLen = $formInputs.length;
            for (var i = 0; i < frmInpLen; i++) {
                var $currInput = $($formInputs[i]);
                var name = $currInput.attr("name");
                if(name == "Main_contract_id"){
                    console.log($currInput.attr("name"), $currInput.val())
                    if($currInput.val() !== "ignore"){
                        newContract[$currInput.attr("name")] = $currInput.val();
                    }
                }
                else if (name == "DefaultOrg") {
                    defaultOrg = (($currInput.prop("checked")) ? "1" : "0");
                }
                else if (name != "Hashtags" && name != "Summera")
                    newContract[name] = $currInput.val();
                else if (name == "Summera") {
                    newContract["Summera"] = (($currInput.prop("checked")) ? "1" : "0");
                }
                else
                    hashtags = $currInput.val();
            }
            newContract["Customer"] = $customerSelect.val();
            newContract["OrgInfoId"] = $("#orginfoid-select").val();
            newContract["Sign"] = "@Html.Raw(System.Web.HttpContext.Current.GetUser().Sign)";
            newContract["Area"] = "@Html.Raw(System.Web.HttpContext.Current.GetUser().Area)";

            $.ajax({
                "url": "@Url.Content("~/CustomerContract/Insert/")",
                "type": "POST",
                "data": {
                    "json": JSON.stringify(newContract),
                    "hashtags": hashtags,
                    "defaultorg": defaultOrg
                },
                "success": function(data){
                    if(data != "0" && data != "-1"){
                        updateDataTable($("#crm-select-customer").val(),$("#crm-select-user").val());
                        triggerAlert("Successfully added new contract.", "success");
                        $("#newRowModal").modal("toggle");

                        window.history.pushState(null,null,["Index?contract-id=" + data + "&customer=" + newContract.Customer ]);

                        window.location = "ViewPdf?contract-id=" + encodeURIComponent(data) + "&customer=" + newContract.Customer;

                    }
                    else {
                        triggerAlert("Failed to add new contract.", "warning");
                    }
                }
            });
        }
    });
</script>

<!--
    Script for contact modal
-->
<script>
    var currentPerson;
    var $customerSelect = $("#crm-select-customer");
    $("#contact-modal-button").click(function(){
        $("#contactModal").appendTo("body").modal("show").draggable();
    });
    var loadContactData = function()
    {
        $.ajax({
            "url": "@Url.Content("~/CustomerContract/GetContacts/")",
            "type": "POST",
            "data": {
                "customer": $("#crm-select-customer").val()
            },
            "success": function(data){
                currentPerson = JSON.parse(data);
                $select = $("#crm-contact-select");
                $select.html("");

                $button = $("#create-contact-button");


                for(var i = 0; i < currentPerson.length; i++)
                {
                    var person = currentPerson[i];
                    $select.append($("<option></option>").attr("value", JSON.stringify(person)).html(person.Contact_person));
                    if(i == 0)
                    {
                        changePersonToShow(person);
                    }

                }
                $select.append("<option new-person='true'>New person</option>");

                if($select.children().length > 1)
                    $button.hide();
                else
                    $button.show();
                $select.selectpicker('refresh');
            }
        });
    }
    $("#crm-contact-select").change(function(){
        $option = $(this).find("option:selected");
        if(typeof $option.attr("new-person") == "undefined")
        {
            $("#create-contact-button").hide();
            changePersonToShow(JSON.parse(this.value), $option);
        }
        else
        {
            changePersonToShow("", $option);
        }
    });

    $("#remind-modal-button").click(function(){
        $("#reminderModal").appendTo("body").modal("show").draggable();
    });
    var loadReminders = function()
    {
        $.ajax({
            "url": serverPrefix + "CustomerOffer/GetReminders/",
            "type": "POST",
            "data": {
                "customer": $("#crm-select-customer").val()
            },
            "success": function(data){
                reminders = JSON.parse(data);

                $newRows = $(".reminder-body");
                $newRows.empty();
                $newRows.html("");
                $newRows.append("<tbody>");
                for(var i = 0; i < reminders.length; i++)
                {
                    var remind = reminders[i];

                    var $row = $("<tr>                                                                                                \
                                    <td class='startdat'>" + remind.Start_date + "</td>                                   \
                                    <td class='remtext'>" + remind.Reminder_text + "</td>         \
                                    <td class='sign'>" + remind.Sign + "</td>         \
                                    <td class='deactivate'><input data-id=" + remind.ID_PK + " class='ch-deact' type='checkbox' /></td>         \
                                </tr>");
                    $newRows.append($row);
                }
                $newRows.append("<tbody>");
            }
        });
    }

    $("#save-reminders").click(function(){
        var $inputs = $("#reminderModal #reminder-table").find("input:checked");
        var length = $inputs.length;
        for(var i = 0; i < length; i++){
            $input = $($inputs[i]);
            var id = $input.attr("data-id");
            $.ajax({
                "url": serverPrefix + "CustomerOffer/DeactivateReminder/",
                "type": "POST",
                "data": {
                    "id_pk": id
                },
                "success": function(data){

                }
            });
        }
        $("#reminderModal").modal("hide");
        checkReminder($("#crm-select-customer").val(), false);
        triggerAlert("Successfully deactivated reminders", "success");
    });

    var changePersonToShow = function(person, $option)
    {
        if(typeof $option != "undefined")
        {
            if(typeof $option.attr("new-person") == "undefined")
            {
                $("#fullName3").val($("<div>").html(person.Contact_person).text());
                $("#title3").val(person.Title);
                $("#inputEmail3").val(person.Email);
                $("#phoneNumber3").val(person.Telephone);
                $("#mobileNumber3").val(person.Mobile);
                $("#address3").val(person.Address);
                $("#notes3").val($("<div>").html(person.Notes).text());
            }
            else
            {
                $("#fullName3").val("");
                $("#title3").val("");
                $("#inputEmail3").val("");
                $("#phoneNumber3").val("");
                $("#mobileNumber3").val("");
                $("#address3").val("");
                $("#notes3").val("");
            }
        }
        else
        {
            $("#fullName3").val($("<div>").html(person.Contact_person).text());
            $("#title3").val(person.Title);
            $("#inputEmail3").val(person.Email);
            $("#phoneNumber3").val(person.Telephone);
            $("#mobileNumber3").val(person.Mobile);
            $("#address3").val(person.Address);
            $("#notes3").val($("<div>").html(person.Notes).text());
        }
    }


    $("#save-contact-changes").click(function(){
        $option = $("#crm-contact-select").find("option:selected");
        if(typeof $option.attr("new-person") == "undefined")
        {
            updateContact();
        }
        else{
            insertContact();
        }
    });

    var updateContact = function(){
        if ($("#contactModal form").valid())
        {
            $option = $("#crm-contact-select").find("option:selected");
            var oldPerson = JSON.parse($option.val());
            var person = {}
            person.oldName = oldPerson.Contact_person;
            person.oldEmail = oldPerson.Email;
            if(selectedId != null)
                person. contractNumber = selectedId;
            person.Customer = $customerSelect.val();
            person.Contact_person = $("#fullName3").val();
            person.Email = $("#inputEmail3").val();
            person.Telephone = $("#phoneNumber3").val();
            person.Address = $("#address3").val();
            person.Mobile = $("#mobileNumber3").val();
            person.Notes = $("#notes3").val();
            person.Title = $("#title3").val();

            $.ajax({
                "url": "@Url.Content("~/CustomerContract/SaveContact/")",
                "type": "POST",
                "data": {
                    "json": JSON.stringify(person),
                    "id": selectedId
                },
                "success": function(data){
                    if(data > 0)
                    {
                        updateDataTable($("#crm-select-customer").val(),$("#crm-select-user").val());
                        selectedId = null;
                        triggerAlert("Successfully updated contact.", "success");
                        $("#contactModal").modal("toggle");
                    }
                    else
                    {
                        triggerAlert("Failed to update contact.", "warning");
                    }
                }
            });
        }
    }

    var insertContact = function(){
        if ($("#contactModal form").valid())
        {
            var person = {}
            $option = $("#crm-contact-select").find("option:selected");

            person.Customer = $customerSelect.val();
            person.Contact_person = $("#fullName3").val();
            person.Email = $("#inputEmail3").val();
            person.Telephone = $("#phoneNumber3").val();
            person.Address = $("#address3").val();
            person.Mobile = $("#mobileNumber3").val();
            person.Notes = $("#notes3").val();
            person.Title = $("#title3").val();

            $.ajax({
                "url": "@Url.Content("~/CustomerOffer/InsertContact/")",
                "type": "POST",
                "data": {
                    "json": JSON.stringify(person)
                },
                "success": function(data){
                    if(data > 0)
                    {
                        $select = $("#crm-contact-select");
                        json = JSON.stringify(person);
                        $select.prepend($("<option></option>").attr("value", json).html(person.Contact_person));
                        $select.val(json);
                        triggerAlert("Successfully added contact.", "success");
                        updateContact();
                    }
                    else
                    {
                        triggerAlert("Failed to add contact.", "warning");
                    }
                }
            });
        }
    }
</script>

<!--
    Script for main page
-->
<script>
    var selectedId;
    var onSuccess = function(data, textStatus, jqxhr, $row){
        if(data > 0)
        {
            $@{@ViewBag.ControllerName}Table.row( $row )
            .remove()
            .draw();
            $(document).trigger("clear-alerts");
            $(document).trigger("add-alerts", [
              {
                  'message': 'Row successfully deleted!',
                  'priority': 'success'
              }
            ]);
        }
    }
    var openModal = function(){
        $("#appointmentModal").appendTo("body").modal("show").draggable();
    }
    var selectedContract = {};
    var selectRow = function(element){
        var $td = $(element);
        var $row = $(element).parent();
        var $table = $("#CustomerContract-table");

        $td.find("input").prop("checked", true);
        selectedCustomer = $row.find("td[data-data='Customer']").html();
        selectedId = $td.find("input").val();
        if(selectedId !== null)
            generateSelectedContract($row);
        StateCookie.updateSite(null, selectedId);
        $table.find("tr.selected").removeClass("selected");
        $row.addClass("selected");

        var $selRowContainer = $("#CustomerContract-table_wrapper").find(".row").first().find(".col-sm-6").first();
        $button = $selRowContainer.find("#crm-delete-contract");
        if(selectedContract.Status == "Makulerat" && $button.length == 0){
            $("<div id='crm-delete-contract' class='crm-table-btn'><button type='button' class='btn btn-danger'>Remove</button></div>").insertBefore('#crm-help-info');
            $selRowContainer.find("#crm-delete-contract").bind("click", function(){
                bootbox.dialog({
                    title: 'Do you want to delete this contract?',
                    message: "You are about to delete the selected contract",
                    buttons: {
                        'yes': {
                            label: 'Yes',
                            className: 'btn-danger pull-right',
                            callback: function () {
                                $.ajax({
                                    "url": serverPrefix + "CustomerContract/DeleteContract/",
                                    "type": "POST",
                                    "data": {
                                        "id": selectedContract.Contract_id,
                                        "customer": selectedContract.Customer
                                    },
                                    "success": function(data){
                                        if(data > 0)
                                        {
                                            updateDataTable($("#crm-select-customer").val(),$("#crm-select-user").val());
                                            //checkReminder($("#crm-select-customer").val());
                                            selectedId = null;
                                            triggerAlert("Successfully deleted contract.", "success");
                                        }
                                        else
                                        {
                                            if (data === "-1")
                                                triggerAlert("Failed to delete contract.", "warning");
                                            else if (data === "-2")
                                                triggerAlert("Failed to delete subdata to contract", "warning");
                                        }
                                    }
                                });
                            }
                        },
                        'no': {
                            label: 'No',
                            className: 'pull-right',
                        }
                    },
                });
            });
        }
        else if($button.length != 0 && selectedContract.Status != "Makulerat"){
            $selRowContainer.find("#crm-delete-contract").remove();
        }
    }

    var handleStates = function () {
        var stateSearch = StateCookie.getCurrentSite().search;
        var $searchBox = $("#CustomerContract-table_filter").find(":input");

        if (stateSearch !== undefined) {
            $searchBox.val(String(stateSearch));
            $searchBox.trigger($.Event("keyup", { keyCode: 13 }));
        }

        var waitBeforeSave;
        $searchBox.bind('keyup', function () {
            clearTimeout(waitBeforeSave);
            waitBeforeSave = setTimeout(function(){
                console.log("running keydown");
                StateCookie.updateSite($searchBox.val());
            }, 500)
        });
    }

    var generateSelectedContract = function($selectedRow){
        selectedContract.Contract_id = $selectedRow.find("td:nth-child(2)").html();
        selectedContract.Customer = $selectedRow.find("td:nth-child(3)").html();
        selectedContract.Title = $selectedRow.find("td:nth-child(4)").html();
        selectedContract.Contract_type = $selectedRow.find('td:nth-child(5)').html();
        selectedContract.Term_of_notice = $selectedRow.find('td:nth-child(6)').html();
        selectedContract.Extension = $selectedRow.find('td:nth-child(7)').html();
        selectedContract.Status = $selectedRow.find('td:nth-child(8)').html();
        selectedContract.CRM_id = $selectedRow.find('td:nth-child(9)').html();
        selectedContract.Valid_from = $selectedRow.find('td:nth-child(10)').html();
        selectedContract.Valid_through = $selectedRow.find('td:nth-child(11)').html();
        selectedContract.Main_contract_id = $selectedRow.find('td:nth-child(12)').html();
        selectedContract.Expire = $selectedRow.find('td:nth-child(13)').html();
        selectedContract.Observation = $selectedRow.find('td:nth-child(14)').html();
        selectedContract.Note = $selectedRow.find('td:nth-child(15)').html();
        selectedContract.Contact_person = $selectedRow.find('td:nth-child(16)').html();
        selectedContract.Area = $selectedRow.find('td:nth-child(17)').html();
    }
    var uniqueRowNumber = 0;
    var drawCallBack = function(nRow, aData, iDisplayIndex, iDisplayIndexFull) {

        var i = 0, j = 0;
        var insertValue;
        var StateSelId = StateCookie.getCurrentSite().selectedId;
        for (var name in aData) {

            var $td;

            if(i == 0)
            {
                $td = $('td:eq(' + i + ')', nRow);

                $td.parent().click(function () {

                    selectRow(this.firstChild);

                });

                $td.parent().dblclick(function(){
                    $input = $("#CustomerContract-table_filter").find(":input");
                    val = $input.val();
                    window.history.pushState(null, null, ["ViewPdf?contract-id=" + encodeURIComponent(selectedId) + "&customer=" + $customerSelect.val() + "&search=" + val]);

                    window.location.href = "ViewPdf?contract-id=" + encodeURIComponent(selectedId) + "&customer=" + $customerSelect.val() + "&search=" + val;
                });

                var object = {Contract_id: aData["Contract_id"], Customer: aData["Customer"]}
                $td.html("<input type='radio' value='" + aData["Contract_id"] + "' name='selected-contract' onClick=''/>");
                if ($td.find("input").val() == StateSelId) {
                    selectRow($td);
                }
                else if ($td.parent().hasClass("selected") && $td.find("input").val() != selectedId) {
                    $td.parent().removeClass("selected");
                }
                i++;

            }
            if (i >= 1) {
                $td = $('td:eq(' + i + ')', nRow);
                if(name == "_HashtagList"){
                    $td.attr("data-rep", JSON.stringify(aData[name]));
                    $td.hide();
                }
                else{
                    $td.attr("data-type", "select");
                    $td.attr("data-data", name);
                }
                // deleteRowFunction($td, dataObj);
            }


            i++;
        }
    }

    @{String DataObject = "\r\n\t\t\t\t\t{ \"data\": \"" + "#" + "\"  },\r\n";}
    @foreach (System.Reflection.PropertyInfo PropertyInfo in ViewBag.Properties)
        {

            if ((!PropertyInfo.Name.StartsWith("_") || PropertyInfo.Name == "_HashtagList") && !ViewBag.SkipProperties.Contains(PropertyInfo.Name) && !PropertyInfo.Name.StartsWith("OrgInfoId"))
            {
                String PropertyName = PropertyInfo.Name.Replace("_", " ");
                DataObject += "\t\t\t\t\t{ \"data\": \"" + @PropertyInfo.Name + "\"  },\r\n";
            }

        }

    @{DataObject = DataObject.Remove(DataObject.Length - 3);}
    var updateDataTable = function(customer, user, onSuccess)
    {
        console.log(customer);
        $('#@ViewBag.ControllerName-table').DataTable({
            "destroy": true,
            "processing": true,
            //"ajax": "/CustomerProductReport/CustomerData/",
            "ajax": {
                "url": "@Url.Content("~/CustomerContract/CustomerContractJsonData/")",
                "type": "POST",
                "data": {
                    "customer": customer,
                    "our_sign": user
    }
            },
            "initComplete": function(settings, json) {
                drawButtons();
                if(typeof onSuccess != "undefined")
                    onSuccess();
                handleStates();
            },
            "defaultContent": "",
            "bPaginate": false,
            "bInfo" : false,
            //"iDisplayLength": Math.ceil(($("#page-content-wrapper").height() / 60)),
            "order": [[9, "desc"]],
            //[14, "desc"],
            "columns": [@Html.Raw(DataObject)
            ],
            "columnDefs": [
                {
                    "data": null,
                    "defaultContent": "",
                    "targets": 0
                },
                @*{
                        "width": "210px",
                        "targets": 1
                    },
                    {
                        "width": "210px",
                        "targets": 2
                    },
                    {
                        "width": "80px",
                        "targets": 4
                    },
                    {
                        "width": "70px",
                        "targets": 7
                    },
                    {
                        "width": "180px",
                        "targets": 9
                    },
                    {
                        "width": "70px",
                        "targets": 10
                    },
                    {
                        "width": "17%",
                        "targets": 12
                    },*@
            ],
            "scrollY": ($("#page-content-wrapper").height() - 170),
            "scrollX": true,
            "fnRowCallback": drawCallBack
        });
        checkReminder(customer, "@Html.Raw(ViewBag.showModalReminder)" == "True");
        var $selRowContainer = $("#@ViewBag.ControllerName-table_length");
        //$selRowContainer.append("<div id='crm-add-row' class='crm-table-btn'><button type='button' class='btn btn-default'>Add row</button></div>");
        //$selRowContainer.append("<div id='crm-save-updates' class='crm-table-btn'><button type='button' id='crm-save-btn' class='btn btn-success' autocomplete='off'>Save</button></div>");
        //$('#crm-save-btn').on('click', save);
    }

    var loadCustomer = function()
    {
        var $formInputs = $("#newRowModal form").find(":input");
        var frmInpLen = $formInputs.length;
        for (var i = 0; i < frmInpLen; i++) {
            var $currInput = $($formInputs[i]);
            if($currInput.attr("type") == "date"){

                var today = new Date();
                if($currInput.attr("name") == "Valid_through"){
                    today.setYear(today.getFullYear() + 3);
                }
                $currInput.val($.datepicker.formatDate('yy-mm-dd', today));

            }
            else if($currInput.attr("name") == "Term_of_notice"){
                $currInput.val("3");
            }

            else {
                $currInput.val("");
            }
        }

        $customer = $("#customer-text");
        $customer.attr("readonly",true);
        $customer.val($("#crm-select-customer").val());
    }

    //Här ritas Create resp. Preview-knapparna i index-bilden. Samt vad som händer när man trycker på knapparna.
    function drawButtons()
    {
        var $selRowContainer = $("#CustomerContract-table_wrapper").find(".row").first().find(".col-sm-6").first();

        $selRowContainer.append("<div id='crm-add-row' class='crm-table-btn'><button type='button' class='btn btn-default'>Create</button></div>");
        $selRowContainer.append("<div id='crm-edit-contract' class='crm-table-btn'><button type='button' class='btn btn-default'>Preview</button></div>");

        $("#crm-edit-contract").bind("click", function(){
            //get selected item and add so the url is correct.
            if(typeof selectedId == "undefined" || selectedId == null)
                triggerAlert("Select an item to preview", "info");
            else
            {
                contract = selectedId;
                //console.log(contract.Contract_id);

                $input = $("#CustomerContract-table_filter").find(":input");
                val = $input.val();
                cval = $customerSelect.val();
                uval = $userSelect.val();
                if(cval == "*")
                    cval = selectedContract.Customer;
                window.history.pushState(null, null, ["Index?contract-id=" + encodeURIComponent(contract) + "&customer=" + cval + "&search=" + val ]);
                window.location = "ViewPdf?contract-id=" + encodeURIComponent(contract) + "&customer=" + cval + "&our_sign=" + uval + "&search=" + val;
            }

        });
        $("#crm-add-row").bind("click", function(){
            if($('#crm-select-customer').val() != "*"){
                console.log("asd");
                loadNewContactData();
                loadCustomer();
                //loadMainContracts();
                console.log(1);
                setDefaultValues();
                $("#newRowModal").appendTo("body").modal("show").draggable();
            } else {
                triggerAlert("You will have to select a valid customer first", "info")
            }
        });

        drawButtonsExtension($selRowContainer, "bottom");
    }
    $(document).ready(function () {

        //$('.selectpicker').val('@Request["customer"]');
        //$('.selectpicker').selectpicker('refresh');

        $customerSelect = $("#crm-select-customer");
        $userSelect = $("#crm-select-user");
        $customerSelect.change(function () {
            selectedId = null;
            loadAppointments();
            updateDataTable(this.value, $("#crm-select-user").val());
        });

        $userSelect.change(function () {
            selectedId = null;
            loadAppointments();
            updateDataTable($("#crm-select-customer").val(), this.value);
        });

        $("#orginfoid-select").change(function (element) {
            //Set default org checkbox depending on OrgInfo-select
            var sel = document.getElementById("orginfoid-select");
            if (sel.selectedIndex > -1) {
                var text = sel.options[sel.selectedIndex].text;

                if (text != null && text.indexOf("Default") > -1) {
                    document.getElementById("defaultorg").checked = true;
                } else {
                    document.getElementById("defaultorg").checked = false;
                }
            }
        });

        //Set focus on select-picker searchbox when selected
        var selectCustomer = $('#div-customer #crm-select-customer').selectpicker();
        selectCustomer.on('shown.bs.select', function (e) {
            $('#div-customer div .bs-searchbox .form-control')[0].focus();
        });

        //Set focus on select-picker searchbox when selected
        var selectUser = $('#div-user #crm-select-user').selectpicker();
        selectUser.on('shown.bs.select', function (e) {
            $('#div-user div .bs-searchbox .form-control')[0].focus();
        });

        $formValidation1 = $("#new-contract-modal form").validate({
            ignore: ".ignore",
            rules: {
                "Term_of_notice": {
                    digits: true
                },
                "Valid_from": {
                    date: true
                },
                "Valid_through": {
                    date: true,
                },
                "Extension": {
                    digits: true
                },
                "Expire": {
                    date: true
                },
                "Observation": {
                    date: true,
                },
                "Contact_person": {
                    maxlength: 100,
                },
                "Area": {
                    required: true
                },
                "Main_contract_id": {
                    required: {
                        depends:function() {
                            if($("#contract_type-select").val() == "Tilläggsavtal") {
                                return true;
                            }
                            else {
                                return false;
                            }
                        }
                    }

                }
            },
            errorElement: "span",
            wrapper: "a",  // a wrapper around the error message
            errorPlacement: function (error, element) {
                error.next().addClass("tooltips");
                error.addClass("tooltips");
                error.insertAfter(element);
            }
        });


        $formValidation = $("#contactModal form").validate({
            ignore: ".ignore",
            rules: {
                "Contact_person": {
                    required: true
                },
                "Email": {
                    email: true,
                    maxlength: 50,
                },
                "Telephone": {
                    maxlength: 20,
                },
                "Mobile": {
                    maxlength: 20,
                },
                "Address": {
                    maxlength: 100,
                },
                "Notes": {
                    maxlength: 255,
                }

            },
            errorElement: "span",
            wrapper: "a",  // a wrapper around the error message
            errorPlacement: function (error, element) {
                error.next().addClass("tooltips");
                error.addClass("tooltips");
                error.insertAfter(element);
            }
        });

        function get_browser() {
            var ua = navigator.userAgent,
                tem,
                M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
            if (/trident/i.test(M[1])) {
                tem =/\brv[ :]+(\d+)/g.exec(ua) || [];
                return 'IE';
            }
            if (M[1] === 'Chrome') {
                tem = ua.match(/\bOPR\/(\d+)/)
                if (tem != null) {
                    return 'Opera'
                }
            }
            M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
            if ((tem = ua.match(/version\/(\d+)/i)) !=null) {
                M.splice(1,1,tem[1]);
            }
            return M[0];
        }

        console.log(get_browser());

        var webkit = get_browser() == "Chrome"  ||
            /iPad|iPhone|iPod/.test( navigator.userAgent )  ||
            get_browser() == "Opera";

        if(!webkit)
        {
            @{
            foreach (System.Reflection.PropertyInfo pi in ViewBag.Properties)
            {

                if(pi.PropertyType == typeof(DateTime?))
                {
                    @Html.Raw("\t\t\t$('#" + pi.Name.ToLower() + "-date').datepicker();\n");
                }

            }
            }
        }
        $("#date").datetimepicker({
            dateFormat: 'yy-mm-dd'
        });


        @*$userSelect.val("@Html.Raw(ViewBag.User)");*@
        $(".selectpicker").selectpicker();
        $(".selectpicker").selectpicker("refresh");
        updateDataTable("@Html.Raw(ViewBag.SelectedCustomer)", $userSelect.val(), function(){
            if($customerSelect.val() == "")
            {
                $("#crm-add-row").unbind("click");
                console.log("unbind");
            }
            else
            {
                $("#crm-add-row").bind("click", function(){
                    if($('#crm-select-customer').val() != "*"){
                        loadNewContactData();
                        loadCustomer();
                        //loadMainContracts();
                        console.log(1);
                        setDefaultValues();
                        $("#newRowModal").appendTo("body").modal("show").draggable();
                    } else {
                        triggerAlert("You will need to select a valid customer first.", "info")
                    }
                });
            }
            $input = $("#CustomerContract-table_filter").find(":input");
        });
    });
</script>