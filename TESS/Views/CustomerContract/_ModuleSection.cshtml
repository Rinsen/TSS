@using TietoCRM.Models;
@using System.Globalization;
@{
    Layout = null;
}





<!-- Print Products/Modules/Articles -->
@PrintListContent(ViewBag.ArticleSystemDictionary, "Produkter")

<!-- Print Options -->
@PrintListContent(ViewBag.OptionSystemList, "Option")

@if (ViewBag.CustomerContract.Is(ContractType.MainContract))
{
    <div id="crm-pdf-module-info">
        <div id="Module_info">@Html.Raw(@ViewBag.Contract_Description)</div>
    </div>
}

<div class="crm-pdf-module-section-text">
    @Html.Raw(ViewBag.ModuleText)
</div>

<!-- Print Consultant Services -->
@PrintConsultantServices(ViewBag.CustomerContract._ContractConsultantRows, "Tjänster")

@if (!ViewBag.CustomerContract.Is(ContractType.MainContract))
{
    //Print out removed products...
    <div class="crm-pdf-old-module-section">
        @try
        {
            Html.RenderPartial("_OldModuleSection", null, new ViewDataDictionary(ViewData));
        }
        catch (Exception ex)
        {
            @Html.Raw(ex);
        }
    </div>

    //KONTROLLERA! BÖR MODULTEXTER SYNAS I TILLÄGGSAVTALET FÖR BEFINTLIGA OCH AVSLUTADE MODULER??? ELLER SKA VI FILTRERA BORT DESSA I TILLÄGGSAVTALET?
    <div id="crm-pdf-module-info">
        <div id="template-Module_header">@Html.Raw(@ViewBag.ContractText.Module_header)</div>
        <div id="Module_info"> @Html.Raw(@ViewBag.ContractText.Module_info) </div>
    </div>
}
<!-- Help printing functinos -->

@helper PrintListContent(List<KeyValuePair<String, List<dynamic>>> list, String title)
{
    // CultureInfo for swedish currency print out
    CultureInfo se = CultureInfo.CreateSpecificCulture("sv-SE");
    bool isMainContract = ViewBag.CustomerContract.Is(ContractType.MainContract);
    bool toBeSummerized = (ViewBag.CustomerContract.Summera == 1);
    bool krEveryRow = (ViewBag.Representative.Kr_every_row == 1 ? true : false);
    string krRow = (krEveryRow ? " kr" : "");
    string krRub = (krEveryRow ? "" : " kr");
    string rubEng = (krEveryRow ? "Engångsavgift" : "Engångs- avgift kr");
    string subh1 = (krEveryRow ? "crm-pdf-subheader_1" : "crm-pdf-subheader_1-rubkr");
    string subh2 = (krEveryRow ? "crm-pdf-subheader_2" : "crm-pdf-subheader_2-rubkr");
    string subr2 = (krEveryRow ? "crm-pdf-subrows_2" : "crm-pdf-subrows_2-rubkr");
    string subr3 = (krEveryRow ? "crm-pdf-subrows_3" : "crm-pdf-subrows_3-rubkr");
    string subs1 = (krEveryRow ? "crm-pdf-subsum_1" : "crm-pdf-subsum_1-rubkr");


    if (list.Count > 0)
    {
        decimal discountsMP = 0;
        decimal discountsLP = 0;
        decimal discountsLM = 0;
        decimal discountsMM = 0;
        decimal ProductLicenseTotal = 0;
        decimal ProductMaintenanceTotal = 0;
        bool summera = true;
        bool hasDiscounts = false;
        int systemCount = 0;
        String previousPriceType = "";
        String currentPriceType = "";

        <div id="crm-pdf-module-rows" class="">

            @foreach (KeyValuePair<String, List<dynamic>> system in list)
            {
                // Get next Price_type
                String nextPriceType = "";
                hasDiscounts = false;
                int nextIndex = systemCount + 1;
                if (nextIndex < list.Count)
                {
                    nextPriceType = list[nextIndex].Value[0].Price_type;
                }

                for (int i = 0; i < system.Value.Count; i++)
                {
                    var article = system.Value[i];

                    if (!((IDictionary<String, object>)article).ContainsKey("ModuleType") || article.ModuleType == "A") //Om ModuleType finns så godtar vi bara Artiklar
                    {
                        currentPriceType = article.Price_type;
                        if (i == 0)
                        {
                            <div class="@subh1" id="crm-pdf-module-rows-title">
                                <table>
                                    <tr>
                                        @if (currentPriceType != previousPriceType)
                                        {   // Print Header and Price_type only if it differs from previous
                                            <td>
                                                <span style="font-size: 10pt; font-weight: bold">@title</span>
                                            </td>
                                            <td></td>
                                            <td>@rubEng</td>
                                            <td>@article.Price_type @krRub</td>
                                        }
                                        else
                                        {
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                        }

                                    </tr>
                                </table>
                            </div>
                            <div class="large-divider"></div>
                        }

                        String License = "";
                        String Maintenance = "";
                        // Format currency
                        if (((IDictionary<String, object>)article).ContainsKey("Discount")) // Handle Discounts
                        {
                            hasDiscounts = true;
                            if (article.Discount != 1 || article.Discount_type == 0)
                            {
                                if ((article.License % 1) == 0)
                                {
                                    License = string.Format(se, "{0:C0}", article.License).Replace(".", " ");
                                }
                                else
                                {
                                    License = string.Format(se, "{0:C2}", article.License).Replace(".", " ");
                                }

                                if ((article.Maintenance % 1) == 0)
                                {
                                    Maintenance = string.Format(se, "{0:C0}", article.Maintenance).Replace(".", " ");
                                }
                                else
                                {
                                    Maintenance = string.Format(se, "{0:C2}", article.Maintenance).Replace(".", " ");
                                }
                                if (article.Discount == 1)
                                {
                                    discountsLM += article.License;
                                    discountsMM += article.Maintenance;
                                }
                                else
                                {
                                    ProductLicenseTotal += Convert.ToDecimal(article.License);
                                    if (summera == true)
                                    {
                                        ProductMaintenanceTotal += Convert.ToDecimal(article.Maintenance);
                                    }
                                }
                                if (!krEveryRow)
                                {
                                    License = License.Replace(" kr", "");
                                    Maintenance = Maintenance.Replace(" kr", "");
                                }

                            }
                            else
                            {
                                discountsLP += article.License;
                                discountsMP += article.Maintenance;
                                License = (int)article.License + "%";
                                Maintenance = (int)article.Maintenance + "%";
                            }
                        }
                        else
                        {
                            if ((article.License % 1) == 0)
                            {
                                License = string.Format(se, "{0:C0}", article.License).Replace(".", " ");
                            }
                            else
                            {
                                License = string.Format(se, "{0:C2}", article.License).Replace(".", " ");
                            }

                            if ((article.Maintenance % 1) == 0)
                            {
                                Maintenance = string.Format(se, "{0:C0}", article.Maintenance).Replace(".", " ");
                            }
                            else
                            {
                                Maintenance = string.Format(se, "{0:C2}", article.Maintenance).Replace(".", " ");
                            }
                            if (!krEveryRow)
                            {
                                License = License.Replace(" kr", "");
                                Maintenance = Maintenance.Replace(" kr", "");
                            }
                            ProductLicenseTotal += article.License;
                            ProductMaintenanceTotal += article.Maintenance;
                        }

                        // Print System header for article groups
                        if (i == 0)
                        {
                            <div class="crm-pdf-subrows_1">
                                <table>
                                    <tr>
                                        <td>@article.System</td>
                                    </tr>
                                </table>
                            </div>
                        }
                        <div class="@subr2">
                            <table>
                                <tr>
                                    <td>@article.Article_number</td>
                                    <td>@article.Classification.Replace("amp;", "")</td>
                                    <td>@article.Module.Replace("amp;", "")</td>
                                    <td>@License</td>
                                    <td>@Maintenance</td>
                                </tr>
                            </table>
                        </div>

                        previousPriceType = article.Price_type;
                    }
                }
                if (hasDiscounts)
                {
                    if (discountsMP < -100)
                    {
                        discountsMP = -100;
                    }
                    if (discountsLP < -100)
                    {
                        discountsLP = -100;
                    }

                    ProductLicenseTotal += discountsLM;
                    ProductMaintenanceTotal += discountsMM;
                    discountsLM = 0;
                    discountsMM = 0;
                }


                // Format currency for total sums
                String ProductLicenseTotalFormated;
                String ProductMaintenanceTotalFormated;
                if ((ProductLicenseTotal % 1) == 0)
                {
                    ProductLicenseTotalFormated = string.Format(se, "{0:C0}", ProductLicenseTotal + ProductLicenseTotal * (decimal)discountsLP / 100).Replace(".", " ");
                }
                else
                {
                    ProductLicenseTotalFormated = string.Format(se, "{0:C2}", ProductLicenseTotal + ProductLicenseTotal * (decimal)discountsLP / 100).Replace(".", " ");
                }
                if ((ProductMaintenanceTotal % 1) == 0)
                {
                    ProductMaintenanceTotalFormated = string.Format(se, "{0:C0}", ProductMaintenanceTotal + ProductMaintenanceTotal * (decimal)discountsMP / 100).Replace(".", " ");
                }
                else
                {
                    ProductMaintenanceTotalFormated = string.Format(se, "{0:C2}", ProductMaintenanceTotal + ProductMaintenanceTotal * (decimal)discountsMP / 100).Replace(".", " ");
                }
                if (!krEveryRow)
                {
                    ProductLicenseTotalFormated = ProductLicenseTotalFormated.Replace(" kr", "");
                    ProductMaintenanceTotalFormated = ProductMaintenanceTotalFormated.Replace(" kr", "");
                }

                // Show summerization if next Price_type differs from current and summerization is enabled.
                if (nextPriceType != currentPriceType && toBeSummerized)
                {
                    <span class="large-divider"></span>
                    <div class="@subs1">
                        <table>
                            <tr>
                                <td></td>
                                <td>Summa</td>
                                <td>@ProductLicenseTotalFormated</td>
                                <td>@ProductMaintenanceTotalFormated</td>
                            </tr>
                        </table>
                    </div>
                    ProductLicenseTotal = 0;
                    ProductMaintenanceTotal = 0;
                }
                systemCount++;
            }

        </div>
    }
}


@helper PrintConsultantServices(List<view_ContractConsultantRow> consultantRows, String title)
{
    // CultureInfo for swedish currency print out
    CultureInfo se = CultureInfo.CreateSpecificCulture("sv-SE");
    bool isMainContract = ViewBag.CustomerContract.Is(ContractType.MainContract);
    bool toBeSummerized = (ViewBag.CustomerContract.Summera == 1);
    bool krEveryRow = (ViewBag.Representative.Kr_every_row == 1 ? true : false);
    string krRow = (krEveryRow ? " kr" : "");
    string krRub = (krEveryRow ? "" : " kr");
    string rubEng = (krEveryRow ? "Engångsavgift" : "Engångs- avgift kr");
    string subh1 = (krEveryRow ? "crm-pdf-subheader_1" : "crm-pdf-subheader_1-rubkr");
    string subh2 = (krEveryRow ? "crm-pdf-subheader_2" : "crm-pdf-subheader_2-rubkr");
    string subr2 = (krEveryRow ? "crm-pdf-subrows_2" : "crm-pdf-subrows_2-rubkr");
    string subr3 = (krEveryRow ? "crm-pdf-subrows_3" : "crm-pdf-subrows_3-rubkr");
    string subs1 = (krEveryRow ? "crm-pdf-subsum_1" : "crm-pdf-subsum_1-rubkr");

    if (consultantRows.Count > 0)
    {
        decimal ServicesTotal = 0;
        @*-------------------------------------
            Konsulttjänster
            -------------------------------------*@
        <div id="crm-pdf-service-rows">
            <div class="@subh2">
                <table>
                    <tr>
                        <td>@title</td>
                        <td>Antal</td>
                        <td>Àpris @krRub</td>
                        <td>Summa @krRub</td>
                    </tr>
                </table>
            </div>
            <div class="large-divider"></div>

            @foreach (view_ContractConsultantRow cr in consultantRows)
            {
                // Fetch Service from DB
                view_Module service = new view_Module();
                service.Select("Article_number = " + cr.Code);
                if (service.Read_name_from_module != 1 && !String.IsNullOrEmpty(cr.Alias))
                {
                    service.Module = cr.Alias;
                }

                // Calculate total sums
                ServicesTotal += Convert.ToDecimal(cr.Total_price);


                // Format currency
                decimal? totPrice = cr.Amount != 0 ? (cr.Total_price / cr.Amount) : 0;
                String Price;
                String TotalPrice;
                if ((totPrice % 1) == 0)
                {
                    Price = string.Format(se, "{0:C0}", totPrice).Replace(".", " ");
                }
                else
                {
                    Price = string.Format(se, "{0:C2}", totPrice).Replace(".", " ");
                }
                if ((cr.Total_price % 1) == 0)
                {
                    TotalPrice = string.Format(se, "{0:C0}", cr.Total_price).Replace(".", " ");
                }
                else
                {
                    TotalPrice = string.Format(se, "{0:C2}", cr.Total_price).Replace(".", " ");
                }
                if (!krEveryRow)
                {
                    Price = Price.Replace(" kr", "");
                    TotalPrice = TotalPrice.Replace(" kr", "");
                }
                <div class="@subr3">
                    <table>
                        <tr>
                            <td>@service.Article_number</td>
                            <td>@service.Module.Replace("amp;", "")</td>
                            <td>@cr.Amount</td>
                            <td>@Price</td>
                            <td>@TotalPrice</td>
                        </tr>
                    </table>
                </div>
            }
            @{
                // Format currency for total sums
                String ServicesTotalFormated;
                if ((ServicesTotal % 1) == 0)
                {
                    ServicesTotalFormated = string.Format(se, "{0:C0}", ServicesTotal).Replace(".", " ");
                }
                else
                {
                    ServicesTotalFormated = string.Format(se, "{0:C2}", ServicesTotal).Replace(".", " ");
                }
                if (!krEveryRow)
                {
                    ServicesTotalFormated = ServicesTotalFormated.Replace(" kr", "");
                }
            }
            @if (toBeSummerized)
            {
                <span class="large-divider"></span>
                <div class="@subs1">
                    <table>
                        <tr>
                            <td></td>
                            <td>Summa: </td>
                            <td></td>
                            <td>@ServicesTotalFormated</td>
                        </tr>
                    </table>
                </div>
            }
        </div>
    }
    @*<div id="crm-pdf-module-info">
            <div id="Module_info">@Html.Raw(@ViewBag.ContractText.Module_info)</div>
        </div>*@

}

