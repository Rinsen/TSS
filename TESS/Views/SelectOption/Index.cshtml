@using TietoCRM.Extensions;
@using TietoCRM.Models;
@using System.Web.Script.Serialization

<div class="col-md-12">
    <form style="margin-bottom: 0.8em;" class="form-inline">
        <div class="form-group">
            <label for="select-selectOptions">Model:</label>
            <select name="user" id="select-selectModels" class="form-control selectpicker" data-live-search="true">
                @foreach (SelectListItem so in ViewBag.SelectModels)
                {
                    <option value="@so.Value" selected>@so.Text</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="select-selectOptions">Property:</label>
            <select name="user" id="select-selectProperties" class="form-control selectpicker" data-live-search="true">
            </select>
        </div>
        <div class="form-group">
            <button style="margin-top: 2em;" id="add-model-and-properties" 
                    class="form-control btn btn-default" type="button">
                Add Model and Properties
            </button>
        </div>
    </form>
</div>
<table draggable="true" id="selectOption-table" class="table table-bordered table-hover" data-url="data1.json" data-height="299" data-sort-name="name" data-sort-order="desc">
    <thead>
        <tr>
            <th data-field="#" data-sortable="false">#</th>
            @foreach (System.Reflection.PropertyInfo PropertyInfo in ViewBag.Properties)
            {
                String PropertyName = PropertyInfo.Name.Replace("_", " ");
                if (!ViewBag.SkipProp.Contains(PropertyInfo.Name))
                {
                    <th data-field="@PropertyInfo.Name" data-sortable="true">@PropertyName</th>
                }
            }
        </tr>
    </thead>
</table>

@* Denna del beskriver editeringsformuläret som dyker upp när man trycker Add Model and Properties *@
<div class="modal fade bs-example-modal-lg" data-backdrop="static" id="addModelAndPropertiesModal" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Add Model or Properties</h4>
            </div>
            <div class="modal-body">
                <form class="form-horizontal">
                    <div class="form-group">
                        <label for="all-model-names" class="col-sm-2 control-label">Models</label>
                        <div class="col-sm-10">
                            <select data-live-serach="true" class="form-control" 
                                    type="text" id="all-model-names" name="allModelNames" data-live-search="true">
                                @foreach (SelectListItem so in ViewBag.ModelNames)
                                {
                                    <option value="@so.Value" selected>@so.Text</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="all-property-names" class="col-sm-2 control-label">Properties</label>
                        <div class="col-sm-10">
                            <select data-live-serach="true" class="form-control" 
                                    type="text" id="all-property-names" name="allPropertyNames" data-live-search="true">
                                <option value="-1">No Property Found</option>
                            </select>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" id="save-ModelAndProperties-changes" class="btn btn-primary">Add</button>
            </div>
            <script>
                var serverPrefix = "@Url.Content("~/")";
                var $thisModal = $('#addModelAndPropertiesModal');
                var $allModelsContainer = $('#all-model-names');
                var $allPropertiesContainer = $('#all-property-names');
                var $saveBtn = $('#save-ModelAndProperties-changes');
                $allModelsContainer.selectpicker();
                $allPropertiesContainer.selectpicker();

                $allModelsContainer.change(function(){
                    var $self = $(this);
                    $.post("/SelectOption/GetProperties", {model: $self.val()}, onSuccess, "JSON");
                    function onSuccess(data){
                        if(data != '-1'){
                            $allPropertiesContainer.html("");
                            $.each(data, function(i, el){
                                var $optionEl = $("<option></option>");
                                $optionEl.val(el.Value);
                                $optionEl.html(el.Text);
                                $allPropertiesContainer.append($optionEl)
                            });
                            $allPropertiesContainer.selectpicker('refresh');
                        }
                    }
                });

                $saveBtn.click(function(){

                    var json = {
                        Model: $allModelsContainer.val(),
                        Property: 'Property',
                        Value: $allPropertiesContainer.val(),
                        Text: $allPropertiesContainer.find("option:selected").text()
                    }

                    $.ajax({
                        "url": serverPrefix + "SelectOption/InsertSelectOption/",
                        "type": "POST",
                        "data": {
                            "json": JSON.stringify(json),
                        },
                        "success": function (data) {
                            if (data > 0) {
                                updateDataTable();
                                console.log("success");
                                $thisModal.modal("hide");
                                $('#select-selectModels').val($allModelsContainer.val());
                                $('#select-selectModels').selectpicker('refresh');
                                updateSelectModels();
                                onSelectModelsChange();
                                triggerAlert("Successfully inserted the new information", "success");
                            }
                            else {
                                console.log("failure");
                                triggerAlert("Something went wrong when trying to insert the information to the server", "warning");
                            }
                        }
                    });
                });
                


            </script>
        </div>
    </div>
</div>
@*Slut på Modal*@

@* Denna del beskriver editeringsformuläret som dyker upp när man trycker på Edit eller Create. Namn=Modal*@
<div class="modal fade bs-example-modal-lg" data-backdrop="static" id="selectOptionModal" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="optionModalLabel">Edit Select Option</h4>
            </div>
            <div class="modal-body">
                <form class="form-horizontal">
                    @{
                        foreach (System.Reflection.PropertyInfo pi in ViewBag.Properties)
                        {
                            if(!ViewBag.SkipProp.Contains(pi.Name))
                            {

                                String pName = pi.Name.Replace("_", " ");
                                <div class="form-group">
                                    <label for="@pi.Name.ToLower()-text" class="col-sm-2 control-label">@pName</label>
                                    <div class="col-sm-10">
                                        @if (pi.Name == "Model")
                                        {
                                            <select data-live-serach="true" class="form-control" type="text" id="@pi.Name.ToLower()" name="@pi.Name">
                                                @foreach (view_SelectOption so in ViewBag.SelectModels)
                                                {
                                                    <option value="@so.Value" selected>@so.Text</option>
                                                }
                                            </select>
                                        }
                                        else if (pi.Name == "Property")
                                        {
                                            <select data-live-serach="true" class="form-control" type="text" id="@pi.Name.ToLower()" name="@pi.Name">
                                                @foreach (SelectOptions<view_SelectOption>.SelectOption so in ViewBag.SelectProperties)
                                                {
                                                    <option value="@so.Value" selected>@so.Text</option>
                                                }
                                            </select>
                                        }
                                        else
                                        {
                                            <input class="form-control" type="text" id="@pi.Name.ToLower()" name="@pi.Name" placeholder="@pName" />
                                        }
                                    </div>
                                </div>

                            }
                        }
                    }
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" id="save-selectOption-changes" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>
@*Slut på Modal*@


<script>
    var serverPrefix = "@Url.Content("~/")";
    var propertyOption = null;
    var uploadToServer = function () {
        if (typeof $("#save-selectOption-changes").attr("data-information") != "undefined") {

            var ID = $("#save-selectOption-changes").attr("data-information");


            var info = {
                "_ID": ID,
                Model: $('#select-selectModels').val(),
                Property:$('#select-selectProperties').val()
            }

            var $formInputs = $("#selectOptionModal form").find(":input");
           
            var frmInpLen = $formInputs.length;
            for (var i = 0; i < frmInpLen; i++) {
                var $currInput = $($formInputs[i]);
                info[$currInput.attr("name")] = $currInput.val();
            }
            $.ajax({
                "url": serverPrefix + "SelectOption/SaveSelectOption/",
                "type": "POST",
                "data": {
                    "json": JSON.stringify(info),
                },
                "success": function (data) {
                    if (data > 0) {
                        updateDataTable();
                        console.log("success");
                        $("#selectOptionModal").modal("hide");
                        propertyOption = $('#select-selectProperties').val(); 
                        onSelectModelsChange();
                        triggerAlert("Successfully updated this information", "success");
                    }
                    else {
                        console.log("failure");
                        triggerAlert("Something went wrong when trying to update the information to the server", "warning");
                    }
                }
            });
        }
        else {
          
            var info = {}
            var $selectModels = $('#select-selectModels');
            var $selectProperties = $('#select-selectProperties');

            info.Model = $selectModels.val();
            info.Property = $selectProperties.val();

            var $formInputs = $("#selectOptionModal form").find(":input");

            var frmInpLen = $formInputs.length;
          
            for (var i = 0; i < frmInpLen; i++) {
                var $currInput = $($formInputs[i]);
                if (!$currInput.is("button"))
                {
                    info[$currInput.attr("name")] = $currInput.val();                 
                }
                   
            }
            $.ajax({
                "url": serverPrefix + "SelectOption/InsertSelectOption/",
                "type": "POST",
                "data": {
                    "json": JSON.stringify(info),
                },
                "success": function (data) {
                    if (data > 0) {
                        updateDataTable();
                        console.log("success");
                        $("#selectOptionModal").modal("hide");
                        propertyOption = $('#select-selectProperties').val(); 
                        onSelectModelsChange();
                        triggerAlert("Successfully inserted the new information", "success");
                    }
                    else {
                        console.log("failure");
                        triggerAlert("Something went wrong when trying to insert the information to the server", "warning");
                    }
                }
            });
        }
    }

    $(document).ready(function () {
        $("#save-selectOption-changes").click(function () {
            if ($("#selectOptionModal form").valid()) {;
                uploadToServer();
            }
        });

        $formValidation = $("#selectOptionModal form").validate({
            ignore: ".ignore",
            rules: {
                "Value": {
                    required: true,
                },
                "Text": {
                    required: true,
                }
            },
            errorElement: "span",
            wrapper: "a",  // a wrapper around the error message
            errorPlacement: function (error, element) {
                error.next().addClass("tooltips");
                error.addClass("tooltips");
                error.insertAfter(element);
            }
        });


        $('[data-toggle="tooltip"]').tooltip()

        var $selectProperties = $('#select-selectProperties')
        $selectProperties.selectpicker();
        $selectProperties.bind('change', function(){
            onSelectPropertyChange()
        });

        var $selectModels = $('#select-selectModels')
        $selectModels.selectpicker();
        $selectModels.bind('change', function(){
            onSelectModelsChange();
        });
        $selectModels.trigger('change');
       


        function onSelectPropertyChange() {
            updateDataTable();
        }
        

    });

    var onSelectModelsChange = function () {
            var $el = $('#select-selectModels');
            console.log($el);
            var $selectElement = $('#select-selectProperties');

            $.ajax({
                url: serverPrefix + "SelectOption/GetSelectProperties",
                type: 'POST',
                data: {
                    model: $el.val()
                },
                success: onSuccess
            })
            
            function onSuccess(data) {
                $selectElement.html(""); // Clear old options
                var selectOptions = JSON.parse(data);
                $.each(selectOptions, function (index, selectOption) {
                    var $optionHtml = $('<option value="' + selectOption.Value + '">' + selectOption.Text + '</option>');
                    $selectElement.append($optionHtml);
                });
                $selectElement.selectpicker('refresh');
                console.log(propertyOption);
                if(propertyOption != null){
                    console.log(propertyOption);
                    $selectElement.find('option[value="' + propertyOption +'"]').prop('selected',true);
                }
                $selectElement.trigger('change');
            }

        }
    var updateSelectModels = function(){
        $.ajax({
            url: serverPrefix + "SelectOption/GetSelectModels",
            type: 'POST',
            success: onSuccess
        });

        var $selectElement = $('#select-selectModels');

        function onSuccess(data) {
            $selectElement.html(""); // Clear old options
            var selectOptions = JSON.parse(data);
            $.each(selectOptions, function (index, selectOption) {
                var $optionHtml = $('<option value="' + selectOption.Value + '">' + selectOption.Text + '</option>');
                $selectElement.append($optionHtml);
            });
            $selectElement.selectpicker('refresh');
        }
    }

</script>



<script>
    var selectedId = null;

    var selectRow = function (element) {
        var $td = $(element);
        var $row = $(element).parent();
        var $table = $("#selectOption-table");

        $td.find("input").prop("checked", true);

        selectedId = $td.find("input").val();

        $table.find("tr.selected").removeClass("selected");

        $row.addClass("selected");
    }

    @{String DataObject = "\r\n\t\t\t\t\t{ \"data\": \"" + "#" + "\"  },\r\n";}
    @foreach (System.Reflection.PropertyInfo PropertyInfo in ViewBag.Properties)
    {
        String PropertyName = PropertyInfo.Name.Replace("_", " ");
        if (!ViewBag.SkipProp.Contains(PropertyInfo.Name))
        {
            DataObject += "\t\t\t\t\t{ \"data\": \"" + @PropertyInfo.Name + "\"  },\r\n";
        }
    }
    @{DataObject = DataObject.Remove(DataObject.Length - 3);}
    var updateDataTable = function (onSuccess, data) {
        var $selectModels = $('#select-selectModels');
        var $selectProperties = $('#select-selectProperties');
        var dataA = {
            model: $selectModels.val(),
            property: $selectProperties.val()
        }
        var dataB = {
            model: null,
            property: null
        }
        data = typeof data == 'undefined' ? dataA : dataB;

        $('#selectOption-table').DataTable({
            "destroy": true,
            "processing": true,
            "ajax": {
                "url": serverPrefix + "SelectOption/GetTableSelectOptions/",
                type: 'POST',
                data: data
            },
            "initComplete": function (settings, json) {
                if (typeof onSuccess != "undefined" && onSuccess != null)
                    onSuccess();
                drawButtons();
            },
            "lengthMenu": [[100, 500, 1000, -1], [100, 500, 1000, "All"]],
           
            "defaultContent": "",
            //"iDisplayLength": Math.ceil(($("#page-content-wrapper").height() / 60)),
            "columns": [@Html.Raw(DataObject)
            ],
            "columnDefs": [
                {
                    "data": null,
                    "defaultContent": "",
                    "targets": 0
                }
            ],

            "fnRowCallback": drawCallBack
        });
    }

    function drawButtons() {
        var $selRowContainer = $("#selectOption-table_wrapper").find(".row").first().find(".col-sm-6").first();
        $selRowContainer.append("<div id='crm-edit-selectOption' class='crm-table-btn'><button type='button' class='btn btn-default'>Edit</button></div>");
        $("#crm-edit-selectOption").bind("click", function () {
            console.log(selectedId);
            if (selectedId != null) {
                $("#optionModalLabel").text("Edit Select Option");
                $("#save-selectOption-changes").attr("data-selectOption", selectedId);
                var $selectedTds = $("#selectOption-table tr.selected td").not(".radios");
                var tdLen = $selectedTds.length;

                var $formInputs = $("#selectOptionModal form").find(":input");
                console.log($formInputs); 

                var frmInpLen = $formInputs.length;
                for (var i = 0; i < frmInpLen; i++) {
                    var $currInput = $($formInputs[i]);
                    for (var j = 0; j < tdLen; j++) {
                        var $currTD = $($selectedTds[j]);
                        if ($currTD.data("property") == $currInput.attr("name")) {
                            $currInput.val($currTD.html());
                        }
                    }
                }
                $("#save-selectOption-changes").attr("data-information", selectedId);
                $("#selectOptionModal").appendTo("body").modal("show").draggable();
            }
            else
                triggerAlert("You have to select a row to edit first.", "info");
        });

        $selRowContainer.append("<div id='create-selectOption-button' class='crm-table-btn'><button type='button' class='btn btn-default'>Create</button></div>");
        $("#create-selectOption-button").bind("click", function () {
            $("#optionModalLabel").text("Create Select Option");
            $("#sign-text").removeAttr("readonly");
            $("#selectOptionModal").appendTo("body").modal("show").draggable();
            $("#save-selectOption-changes").removeAttr("data-information");
            var $selectedTds = $("#selectOption-table tr.selected td").not(".radios");
            var tdLen = $selectedTds.length;

            var $formInputs = $("#selectOptionModal form").find(":input");

            var frmInpLen = $formInputs.length;
            for (var i = 0; i < frmInpLen; i++) {
                var $currInput = $($formInputs[i]);
                if (!$currInput.is('button'))
                    $currInput.val("");
                
            }
            $('#model').selectpicker('refresh');
            $('#property').selectpicker('refresh');
        });

        $selRowContainer.append("<div id='delete-selectOption-button' class='crm-table-btn'><button type='button' class='btn btn-danger'>Delete</button></div>");
        $("#delete-selectOption-button").bind("click", function () {
            bootbox.dialog({
                title: 'Do you want to delete?',
                className: "crm-delete-confirm",
                message: "You are about to delete the selected select option, are you sure you want to delete it?",
                buttons: {
                    'cancel': {
                        label: 'Cancel',
                        className: 'btn-default'
                    },
                    'yes': {
                        label: 'Yes',
                        className: 'btn-danger pull-right',
                        callback: function () {
                            $.ajax({
                                "url": serverPrefix + "SelectOption/DeleteSelectOption/",
                                "type": "POST",
                                "data": {
                                    "_ID": selectedId,
                                },
                                "success": function (data) {
                                    if (data > 0) {
                                        updateDataTable();
                                        console.log("success");
                                        triggerAlert("Successfully deleted row", "success");
                                        propertyOption = $('#select-selectProperties').val(); 
                                        onSelectModelsChange();
                                        selectedId = null;
                                    }
                                    else {
                                        console.log("failure");
                                        triggerAlert("Something went wrong when trying to delete this row", "warning");
                                    }
                                }
                            });
                        }
                    },
                    'no': {
                        label: 'No',
                        className: 'pull-right',
                    }
                },
            });
        });
        drawButtonsExtension($selRowContainer);
    }

    var triggerAlert = function (msg, priorty) {
        $(document).trigger("clear-alerts");
        $(document).trigger("add-alerts", [
          {
              'message': msg,
              'priority': priorty
          }
        ]);
    }
    var skipProp = @Html.Raw((new JavaScriptSerializer()).Serialize(ViewBag.SkipProp));

    var drawCallBack = function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
        var i = 0, j = 0;
        var insertValue;
        for (var name in aData) {
            var $td;
            if (i == 0) {
                $td = $('td:eq(' + i + ')', nRow);

                $td.parent().click(function () {

                    selectRow(this.firstChild);
                    
                });

                $td.html("<input type='radio' value=" + aData["_ID"] + " name='selected-selectOption' onClick=''/>");
                $td.addClass("radios");
                if ($td.find("input").val() == selectedId) {
                    selectRow($td);
                }
                else if ($td.find("input").val() != selectedId) {
                    $td.parent().removeClass("selected");
                }
                i++;
            }

            if ($.inArray(name, skipProp) == -1) {
                
                $td = $('td:eq(' + i + ')', nRow);
                $td.attr("data-property", name);
                $td.html(aData[name]);
                i++;
            }
            
        }
    }
    
    $('document').ready(function () {
        $('#add-model-and-properties').click(function(){
            $('#addModelAndPropertiesModal').appendTo('body').modal('show').draggable();
        });

    });


</script>
