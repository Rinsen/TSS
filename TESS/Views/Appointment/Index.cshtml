@using TietoCRM.Models;
@using TietoCRM.Extensions;
<form>
    <table draggable="true" id="appointment-table" class="table table-bordered table-hover" data-url="data1.json" data-height="299" data-sort-name="name" data-sort-order="desc">
        <thead>
            <tr>
                <th data-field="#" data-sortable="false">#</th>
                @foreach (System.Reflection.PropertyInfo PropertyInfo in ViewBag.Properties)
                {
                    if (PropertyInfo.Name != "_ID")
                    {
                        String PropertyName = PropertyInfo.Name.Replace("_", " ");
                        <th data-field="@PropertyInfo.Name" data-sortable="true">@PropertyName</th>
                    }
                }
            </tr>
        </thead>
    </table>
</form>
@* Denna del beskriver editeringsformuläret som dyker upp när man trycker på Edit eller Create. Namn=Modal*@
<div class="modal fade bs-example-modal-lg" data-backdrop="static" id="appointmentModal" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel">
    <div class="modal-dialog contact-modal" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="appointmentModalLabel">Edit Appointment</h4>
            </div>
            <div id="appointment-modal" class="modal-body">
                <form class="form-horizontal">
                    <table style="width: 100%;">
                        <tr>
                            <td>
                                @foreach (System.Reflection.PropertyInfo pi in ViewBag.Properties)
                                {
                                    String pName = pi.Name.Replace("_", " ");
                                    if (!pi.Name.StartsWith("_") )
                                    {
                                        <div class="form-group">
                                            <label for="@pi.Name.ToLower()-text" style="font-size: 12px" class="col-sm-3 control-label">@pName</label>
                                            <div class="col-sm-9">
                                                @if (pi.Name == "Date")
                                                {
                                                    <input data-enabletime data-time_24hr class="form-control flatpickr" type="text" id="@pi.Name.ToLower()" name="@pi.Name" placeholder="@pName" value="@DateTime.Now.ToString("yyyy-MM-dd HH:mm")" />
                                                }
                                                else if (pi.Name == "Event_type")
                                                {
                                                    <select class="form-control selectpicker" type="text" id="@pi.Name.ToLower()" name="@pi.Name">
                                                        @foreach(SelectOptions<view_Appointment>.SelectOption so in ViewBag.EventTypes)
                                                        {
                                                            <option value="@so.Value">@so.Text</option>
                                                        }
                                                    </select>
                                                }
                                                else if (pi.Name == "Customer")
                                                {
                                                    <select data-live-search="true" class="form-control" type="text" id="@pi.Name.ToLower()" name="@pi.Name">
                                                        @foreach (String customer in ViewBag.Customers)
                                                        {
                                                            <option value="@customer">@customer</option>
                                                        }
                                                    </select>
                                                }
                                                else if (pi.Name == "Contact_person")
                                                {
                                                    <select data-live-search="true" class="form-control" type="text" id="@pi.Name.ToLower()" name="@pi.Name">
                                                        @foreach (view_CustomerContact contact in ViewBag.Contacts)
                                                        {
                                                            <option value="@contact.Contact_person">@contact.Contact_person</option>
                                                        }
                                                    </select>
                                                }
                                                else if (pi.Name == "Area")
                                                {
                                                    <select class="form-control selectpicker" type="text" id="@pi.Name.ToLower()" name="@pi.Name">
                                                        @foreach(var so in (new SelectOptions<view_Sector>()).GetOptions("Area"))
                                                        {
                                                            <option value="@so.Value">@so.Text</option>
                                                        }
                                                    </select>
                                                }
                                                else
                                                {
                                                    <input class="form-control" type="text" id="@pi.Name.ToLower()" name="@pi.Name" placeholder="@pName" />
                                                }
                                            </div>
                                        </div>
                                    }
                                }
                            </td>

                        </tr>
                    </table>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" id="save-appointment-changes" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>
@*Slut på Modal*@

<script>
    var serverPrefix = "@Url.Content("~/")";
    $customerSelect = $("#customer");
    //Sparar ändringar alternativ ny post
    var uploadToServer = function () {

        var appointment = {}

        var $formInputs = $("#appointmentModal form").find(":input");
        console.log($formInputs);
        $("#contact_person").selectpicker('refresh');
        $("#customer").selectpicker('refresh');
        var frmInpLen = $formInputs.length;
        for (var i = 0; i < frmInpLen; i++) {
            var $currInput = $($formInputs[i]);
            appointment[$currInput.attr("name")] = ($currInput.val() == "null" ? null : $currInput.val());
        }
        appointment["Customer"] = $customerSelect.val();
        if ($("#save-appointment-changes").html() != "Create") {
            appointment["_ID"] = selectedId
            $.ajax({
                "url": serverPrefix + "Appointment/SaveAppointment/",
                "type": "POST",
                "data": {
                    "json": JSON.stringify(appointment)
                },
                "success": function (data) {
                    if (data >= 0) {
                        updateDataTable();
                        $("#appointmentModal").modal("hide");
                        triggerAlert("Successfully updated this appointment", "success");
                    }
                    else {
                        triggerAlert("Something went wrong when trying to update the appointment on the server", "warning");
                    }
                }
            });
        }
        else {
            $.ajax({
                "url": serverPrefix + "Appointment/InsertAppointment/",
                "type": "POST",
                "data": {
                    "json": JSON.stringify(appointment),
                    "customer": appointment.Customer
                },
                "success": function (data) {
                    if (data >= 0) {
                        updateDataTable();
                        $("#appointmentModal").modal("hide");
                        triggerAlert("Successfully created this appointment", "success");
                    }
                    else {
                        triggerAlert("Something went wrong when trying to create the appointment on the server", "warning");
                    }
                }
            });
        }

    }

    var addToSelect = function(self)
    {
        var customerID = $(self).parent().parent().parent().parent().find('button').attr('data-id');
        var searchText = $(self).parent().parent().parent().find('.bs-searchbox input').val();
        var $selectPicker = $('#' + customerID);
        $selectPicker.append('<option value="' + searchText + '">' + searchText + '<option>');
        $selectPicker.val(searchText);
        $selectPicker.selectpicker("refresh");
    }

    var updateContactPersons = function (customer) {
        $.ajax({
            "url": serverPrefix + "Appointment/GetContacts/",
            "type": "POST",
            "data": {
                "customer": customer,
            },
            "success": function (data) {
                json = JSON.parse(data);
                $contact = $("#contact_person");
                console.log(json);
                $contact.html("");
                var max = json.length;
                for (var i = 0; i < max; i++) {
                    contact = json[i];
                    $contact.append("<option value='" + contact.Contact_person + "'>" + contact.Contact_person + "</option>");
                }
                if(json.length > 0)
                    $contact.val(json[0].Contact_person);
                else
                    $contact.val("null");
                if (selectedApptContact != null)
                    $contact.val(selectedApptContact);
                $contact.selectpicker("refresh");
            }
        });
    }

    $(document).ready(function () {
        //$("#date").datetimepicker({
        //    dateFormat: 'yy-mm-dd'
        //});
        $event = $("#event_type");
        $contactSelect = $("#contact_person");
        $customerSelect = $("#customer");
        @if(ViewBag.Customers.Count > 0)
        {
            @:$customerSelect.val("@ViewBag.Customers[0]");
        }

        $("#save-appointment-changes").click(function () {
            if ($("#appointment-modal form").valid()) {
                uploadToServer();
            }
        });
        $customerSelect.on('change', function () {
            var selected = $(this).find("option:selected").val();
            updateContactPersons(selected);
        });
        updateContactPersons($customerSelect.val());
        $customerSelect.selectpicker();

        $contactSelect.selectpicker({
            noneResultsText: "No results found. <strong onclick='addToSelect(this)' class='add-to-select'>Add {0} to list</strong>"
        });


        $formValidation = $("#appointmentModal form").validate({
            ignore: ".ignore",
            rules: {
                "Text": {
                    required: true,
                },
                "Date": {
                    required: true,
                    date: true,
                },
                "Title": {
                    required: true,
                },
            },
            errorElement: "span",
            wrapper: "a",  // a wrapper around the error message
            errorPlacement: function (error, element) {
                error.next().addClass("tooltips");
                error.addClass("tooltips");
                error.insertAfter(element);
            }
        });
    });
</script>



<script>
    var selectedId = null;
    var selectedApptContact = null

    var selectRow = function (element) {
        var $td = $(element);
        var $row = $(element).parent();
        console.log($row);
        var $table = $("#appointment-table");

        $td.find("input").prop("checked", true);

        selectedId = $td.find("input").val();
        selectedApptContact = $row.find("[data-property='Contact_person']").html();
        StateCookie.updateSite(null, selectedId);
        $table.find("tr.selected").removeClass("selected");

        $row.addClass("selected");
    }
    var handleStates = function () {
        var stateSearch = StateCookie.getCurrentSite().search;
        console.log(stateSearch);
        var $searchBox = $("#appointment-table_filter").find(":input");

        if (stateSearch !== undefined) {
            $searchBox.val(String(stateSearch));
            $searchBox.trigger($.Event("keyup", { keyCode: 13 }));
        }

        $searchBox.bind('keyup', function () {
            StateCookie.updateSite($searchBox.val());
        });
    }

    @{String DataObject = "\r\n\t\t\t\t\t{ \"data\": \"" + "#" + "\"  },\r\n";}
    @foreach (System.Reflection.PropertyInfo PropertyInfo in ViewBag.Properties)
    {
        if(PropertyInfo.Name != "_ID")
        {
            DataObject += "\t\t\t\t\t{ \"data\": \"" + @PropertyInfo.Name + "\"  },\r\n";
        }
    }
    @{DataObject = DataObject.Remove(DataObject.Length - 3);}
    var updateDataTable = function (onSuccess) {
        getIndexData();
        var $selRowContainer = $("#appointment-table_length");
    }

    function drawButtons() {
        var $selRowContainer = $("#appointment-table_wrapper").find(".row").first().find(".col-sm-6").first();

        $selRowContainer.append("<div id='create-appointment-button' class='crm-table-btn'><button type='button' class='btn btn-default'>Create</button></div>");
        $("#create-appointment-button").bind("click", function () {
            selectedApptContact = null;
            $("#area-text").hide();
            $("#id_pk-text").removeAttr("readonly");
            $("#appointmentModalLabel").text("Create Appointment");
            $("#appointmentModal").appendTo("body").modal("show").draggable();
            $("#save-appointment-changes").removeAttr("data-appointment");
            var $selectedTds = $("#appointment-table tr.selected td").not(".radios");
            var tdLen = $selectedTds.length;

            var $formInputs = $("#appointmentModal form").find(":input");
            $("#contact_person").selectpicker('refresh');
            $("#customer").selectpicker('refresh');
            var frmInpLen = $formInputs.length;
            for (var i = 0; i < frmInpLen; i++) {
                var $currInput = $($formInputs[i]);
                if ($currInput.attr("name") != "Customer" && $currInput.attr("name") != "Event_type")
                    $currInput.val("");
            }
            $("#save-appointment-changes").html("Create");

        });

        $selRowContainer.append("<div id='crm-edit-appointment' class='crm-table-btn'><button type='button' class='btn btn-default'>Edit</button></div>");
        $("#crm-edit-appointment").bind("click", function () {
            if (selectedId != null) {
                $("#area-text").show();
                $("#id_pk-text").prop("readonly", true);
                $("#appointmentModalLabel").text("Edit Appointment");
                $("#save-appointment-changes").attr("data-appointment", selectedId);
                var $selectedTds = $("#appointment-table tr.selected td").not(".radios");
                var tdLen = $selectedTds.length;

                var $formInputs = $("#appointmentModal form").find(":input");

                var frmInpLen = $formInputs.length;
                for (var i = 0; i < frmInpLen; i++) {
                    var $currInput = $($formInputs[i]);
                    for (var j = 0; j < tdLen; j++) {
                        var $currTD = $($selectedTds[j]);
                        var propName = $currTD.attr("data-property");
                        if ($currTD.data("property") == $currInput.attr("name")) {
                            if ($currInput.attr("name") == "Active") {
                                if ($currTD.html() == "1") {
                                    $currInput.prop("checked", true);
                                }
                                else {
                                    $currInput.prop("checked", false);
                                }
                            }
                            else if ($currTD.attr("data-property") == "Customer")
                            {
                                $currInput.val($currTD.html());
                                $("#customer").trigger("change");
                            }
                            else if (propName == "Event_type" || propName == "Customer" || propName == "Area" || propName == "Contact_person") {
                                $currInput.find('option[value="' + $currTD.html() + '"]').prop("selected", true);
                                console.log($currInput.find('option[value="' + $currTD.html() + '"]'));
                            }
                            else
                            {
                                $currInput.val($currTD.html());
                            }
                        }
                    }
                }
                $(".selectpicker").selectpicker('refresh');
                $("#save-appointment-changes").attr("data-appointment", selectedId);
                $("#appointmentModal").appendTo("body").modal("show").draggable();
                $("#save-appointment-changes").html("Save Changes");
            }
            else
                triggerAlert("You have to select a row to edit first.", "info");
        });

        

        $selRowContainer.append("<div id='delete-appointment-button' class='crm-table-btn'><button type='button' class='btn btn-danger'>Delete</button></div>");
        $("#delete-appointment-button").bind("click", function () {
            bootbox.dialog({
                title: 'Do you want to delete?',
                className: "crm-delete-confirm",
                message: "You are about to delete the selected Appointment, are you sure you want to delete it?",
                buttons: {
                    'cancel': {
                        label: 'Cancel',
                        className: 'btn-default'
                    },
                    'yes': {
                        label: 'Yes',
                        className: 'btn-danger pull-right',
                        callback: function () {
                            $.ajax({
                                "url": serverPrefix + "Appointment/DeleteAppointment/",
                                "type": "POST",
                                "data": {
                                    "ID": selectedId,
                                },
                                "success": function (data) {
                                    if (data > 0) {
                                        updateDataTable();
                                        console.log("success");
                                        triggerAlert("Successfully deleted appointment", "success");
                                    }
                                    else {
                                        console.log("failure");
                                        triggerAlert("Something went wrong when trying to delete this appointment", "warning");
                                    }
                                }
                            });
                        }
                    },
                    'no': {
                        label: 'No',
                        className: 'pull-right btn-default',
                    }
                },
            });
        });
        $selRowContainer.append('<div id="crm-export-ical" class="crm-table-btn" \
            onclick="exportToCalendar();">\
            <button type="button" class="btn btn-default">Export to calendar</button></div>');

        drawButtonsExtension($selRowContainer);

    }

    var exportToCalendar = function () {
        bootbox.dialog({
            title: 'What to export?',
            className: "crm-delete-confirm",
            message: "Do you want to import the selected appointment or all appointments?",
            buttons: {
                'cancel': {
                    label: 'Cancel',
                    className: 'btn-default'
                },
                'All appointments': {
                    label: 'All appointments',
                    className: 'pull-right btn-primary',
                    callback: function () {
                        location.href="@Url.Action("GetiCalendar", "Appointment", null, Request.Url.Scheme).Replace("http://","webcal://")";
                    }
                },
                'Selected appointment': {
                    label: 'Selected appointment',
                    className: 'pull-right btn-primary',
                    callback: function () {
                        if(selectedId != null)
                            location.href = "@Url.Action("GetiCalendar", "Appointment", null, Request.Url.Scheme).Replace("http://","webcal://")?id=" + selectedId;
                        else
                            triggerAlert("You have to select a row.", "info");
                    }
                }
            },
        });
    }

    var triggerAlert = function (msg, priorty) {
        $(document).trigger("clear-alerts");
        $(document).trigger("add-alerts", [
          {
              'message': msg,
              'priority': priorty
          }
        ]);
    }

    var drawCallBack = function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
        var i = 0, j = 0;
        var insertValue;
        var StateSelId = StateCookie.getCurrentSite().selectedId;
        for (var name in aData) {
            var $td;
            if (i == 0) {
                $td = $('td:eq(' + i + ')', nRow);

                $td.parent().click(function () {

                    selectRow(this.firstChild);
                    console.log("asd");
                });

                $td.html("<input type='radio' value=" + aData["_ID"] + " name='selected-contact' onClick=''/>");
                $td.addClass("radios");
                if ($td.find("input").val() == StateSelId) {
                    selectRow($td);
                }
                else if ($td.find("input").val() != selectedId) {
                    $td.parent().removeClass("selected");
                }
                i++;
            }

            if (name != "_ID") {
                if (i < 9) {
                    $td = $('td:eq(' + i + ')', nRow);
                    $td.attr("data-property", name);
                    $td.html(aData[name]);
                }
                i++;
            }

        }
    }

    $('document').ready(function () {
        flatpickr("#date", { static: true });
        getIndexData();
    });

    var getIndexData = function () {
        $('#appointment-table').DataTable({
            "destroy": true,
            "processing": true,
            "ajax": {
                "url": serverPrefix + "Appointment/AppointmentJsonData/",
            },
            "initComplete": function (settings, json) {
                drawButtons();
                handleStates();
            },
            "defaultContent": "",
            "order": [[1, "asc"]],
            "columns": [@Html.Raw(DataObject)],
            "columnDefs": [
                {
                    "data": null,
                    "defaultContent": "",
                    "targets": 0
                },
                {
                    "type": "swedish-string",
                    "targets": 3
                }

            ],
            "lengthMenu": [[100, 500, 1000, -1], [100, 500, 1000, "All"]],
            "scrollY": ($("#page-content-wrapper").height() - 170),
            "scrollX": true,
            "fnRowCallback": drawCallBack
        });
    };
</script>
