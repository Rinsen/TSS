@using TietoCRM.Models;
@using TietoCRM.Extensions;
<table draggable="true" id="Sector-table" class="table table-bordered table-hover" data-url="data1.json" data-height="299" data-sort-name="name" data-sort-order="desc">
    <thead>
        <tr>
            <th data-field="#" data-sortable="false">#</th>
            @foreach (System.Reflection.PropertyInfo PropertyInfo in ViewBag.Properties)
            {
                String PropertyName = PropertyInfo.Name.Replace("_", " ");
                if (@PropertyName != "SSMA timestamp" && @PropertyName != " ID PK")
                {
                    <th data-field="@PropertyInfo.Name" data-sortable="true">@PropertyName</th>
                }

            }
        </tr>
    </thead>
</table>

@* Denna del beskriver editeringsformuläret som dyker upp när man trycker på Edit eller Create. Namn=Modal*@
<div class="modal fade bs-example-modal-lg" data-backdrop="static" id="SectorModal" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel">
    <div class="modal-dialog contact-modal" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="sectorModalLabel">Edit Sector levels</h4>
            </div>
            <div id="Sector-modal" class="modal-body">
                <form class="form-horizontal">
                    @{
                        foreach (System.Reflection.PropertyInfo pi in ViewBag.Properties)
                        {
                            if (!pi.Name.Equals("_ID_PK"))
                            {
                                String pName = pi.Name.Replace("_", " ");
                                if(pi.Name == "Area")
                                {
                                    <div class="form-group">
                                        <label for="@pi.Name.ToLower()-text" class="col-sm-2 control-label">@pName</label>
                                        <div class="col-sm-10">
                                            @if (GlobalVariables.isAuthorized(GlobalVariables.UserLevel.Salesperson))
                                            {
                                                <input class="form-control" id="@pi.Name.ToLower()-text" name="@pi.Name" 
                                                       value="@HttpContext.Current.GetUser().Area" disabled />
                                            }
                                            else
                                            {
                                                <select class="form-control selectpicker" id="@pi.Name.ToLower()-text" name="@pi.Name">
                                                    @foreach(var so in (new SelectOptions<view_Sector>()).GetOptions("Area"))
                                                    {
                                                        <option value="@so.Value">@so.Text</option>
                                                    }
                                                </select>
                                            }
                                        </div>
                                    </div>
                                }
                                else if(pi.Name == "Price_type"){
                                    <div class="form-group">
                                        <label for="@pi.Name.ToLower()-text" class="col-sm-2 control-label">@pName</label>
                                        <div class="col-sm-10">
                                            <select class="form-control selectpicker" id="@pi.Name.ToLower()-text" name="@pi.Name">
                                                @foreach(var so in (new SelectOptions<view_Sector>()).GetOptions("Price_type"))
                                                {
                                                    <option value="@so.Value">@so.Text</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="form-group">
                                        <label for="@pi.Name.ToLower()-text" class="col-sm-2 control-label">@pName</label>
                                        <div class="col-sm-10">
                                            <input class="form-control" id="@pi.Name.ToLower()-text" name="@pi.Name" placeholder="@pName">
                                        </div>
                                    </div>
                                }
                            }
                        }
                    }
                    
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" id="save-Sector-changes" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>
@*Slut på Modal*@

<script>
    var serverPrefix = "@Url.Content("~/")";
    //Sparar ändringar alternativ ny post
    var uploadToServer = function () {
        if (typeof $("#save-Sector-changes").attr("data-Sector") != "undefined") {

            var oldSector = $("#save-Sector-changes").attr("data-Sector");

            var Sector = {}

            var $formInputs = $("#SectorModal form").find(":input");
            var frmInpLen = $formInputs.length;
            for (var i = 0; i < frmInpLen; i++) {
                var $currInput = $($formInputs[i]);
                if (!$currInput.is("button")) {
                    Sector[$currInput.attr("name")] = $currInput.val();
                }
            }
            $.ajax({
                "url": serverPrefix + "Sector/SaveSector/",
                "type": "POST",
                "data": {
                    "json": JSON.stringify(Sector),
                    "id_pk": oldSector,
                },
                "success": function (data) {
                    if (data > 0) {
                        updateDataTable();
                        $("#SectorModal").modal("hide");
                        triggerAlert("Successfully updated this Sector", "success");
                    }
                    else {
                        if (data == 0) {
                            triggerAlert("SortNo already exist", "warning");
                        }
                        else {
                            triggerAlert("Something went wrong when trying to update the Sector on the server", "warning");
                        }
                    }
                }
            });
        }
        else {
            var Sector = {}

            var $formInputs = $("#Sector-modal form").find(":input");
            var frmInpLen = $formInputs.length;
            for (var i = 0; i < frmInpLen; i++) {
                var $currInput = $($formInputs[i]);
                if (!$currInput.is("button")) {
                    Sector[$currInput.attr("name")] = $currInput.val();
                }
            }
            $.ajax({
                "url": serverPrefix + "Sector/InsertSector/",
                "type": "POST",
                "data": {
                    "json": JSON.stringify(Sector),
                },
                "success": function (data) {
                    if (data > 0) {
                        updateDataTable();
                        $("#SectorModal").modal("hide");
                        triggerAlert("Successfully inserted the new Sector", "success");
                    }
                    else {
                        if (data == 0) {
                            triggerAlert("SortNo already exist", "warning");
                        }
                        else {
                            triggerAlert("Something went wrong when trying to insert the Sector on the server", "warning");
                        }
                    }
                }
            });
        }
    }

    $(document).ready(function () {
        $("#save-Sector-changes").click(function () {
            if ($("#Sector-modal form").valid()) {
                uploadToServer();
            }
        });

        $formValidation = $("#SectorModal form").validate({
            ignore: ".ignore",
            rules: {
//                "ID_PK": {
//                    required: true,
//                    maxlength: 3,
//                },
                "System": {
                    required: true,
                    maxlength: 50,
                },
                "Classification": {
                    required: true,
                    maxlength: 50,
                },
                "Area": {
                    required: true,
                    maxlength: 50,
                },
                "SortNo": {
                    required: true,
                    digits: true,
                    maxlength: 3,
                },
                "ShortName": {
                    required: false,
                    maxlength: 4,
                },
            },
            errorElement: "span",
            wrapper: "a",  // a wrapper around the error message
            errorPlacement: function (error, element) {
                error.next().addClass("tooltips");
                error.addClass("tooltips");
                error.insertAfter(element);
            }
        });
    });
</script>



<script>
    var selectedId = null;

    var selectRow = function (element) {
        var $td = $(element);
        var $row = $(element).parent();
        var $table = $("#Sector-table");

        $td.find("input").prop("checked", true);

        selectedId = $td.find("input").val();
        area = $row.find('td[data-property="Area"]').html();

        StateCookie.updateSite(null, selectedId, area);

        $table.find("tr.selected").removeClass("selected");

        $row.addClass("selected");
    }

    var handleStates = function () {
        var stateSearch = StateCookie.getCurrentSite().search;
        var $searchBox = $("#Sector-table_filter").find(":input");

        if (stateSearch !== undefined) {
            $searchBox.val(String(stateSearch));
            $searchBox.trigger($.Event("keyup", { keyCode: 13 }));
        }

        $searchBox.bind('keyup', function () {
            StateCookie.updateSite($searchBox.val());
        });
    }


    @{String DataObject = "\r\n\t\t\t\t\t{ \"data\": \"" + "#" + "\"  },\r\n";}
    @foreach (System.Reflection.PropertyInfo PropertyInfo in ViewBag.Properties)
    {
        String PropertyName = PropertyInfo.Name.Replace("_", " ");
        if (@PropertyName != "SSMA timestamp" && @PropertyName != " ID PK")
        {
            DataObject += "\t\t\t\t\t{ \"data\": \"" + @PropertyInfo.Name + "\"  },\r\n";
        }
    }
    @{DataObject = DataObject.Remove(DataObject.Length - 3);}
    var updateDataTable = function (onSuccess) {
        $('#Sector-table').DataTable({
            "destroy": true,
            "processing": true,
            "ajax": {
                "url": serverPrefix + "Sector/SectorJsonData/",
            },
            "initComplete": function (settings, json) {
                if (typeof onSuccess != "undefined")
                    onSuccess();
                handleStates();
                drawButtons();
            },
            "lengthMenu": [[100, 500, 1000, -1], [100, 500, 1000, "All"]],
            "defaultContent": "",
            //"iDisplayLength": Math.ceil(($("#page-content-wrapper").height() / 60)),
            "order": [[1, "asc"]],
            "columns": [@Html.Raw(DataObject)
            ],
            "columnDefs": [
                {
                    "data": null,
                    "defaultContent": "",
                    "targets": 0
                }
            ],
            "scrollY": ($("#page-content-wrapper").height() - 170),
            "scrollX": true,
            "fnRowCallback": drawCallBack
        });
        var $selRowContainer = $("#Sector-table_length");
        //$selRowContainer.append("<div id='crm-add-row' class='crm-table-btn'><button type='button' class='btn btn-default'>Add row</button></div>");
        //$selRowContainer.append("<div id='crm-save-updates' class='crm-table-btn'><button type='button' id='crm-save-btn' class='btn btn-success' autocomplete='off'>Save</button></div>");
        //$('#crm-save-btn').on('click', save);
    }

    function drawButtons() {
        var $selRowContainer = $("#Sector-table_wrapper").find(".row").first().find(".col-sm-6").first();

        

        $selRowContainer.append("<div id='create-Sector-button' class='crm-table-btn'><button type='button' class='btn btn-default'>Create</button></div>");
        $("#create-Sector-button").bind("click", function () {
            $("#id_pk-text").removeAttr("readonly");
            $("#sectorModalLabel").text("Create Sector Levels");
            $("#SectorModal").appendTo("body").modal("show").draggable();
            $("#save-Sector-changes").removeAttr("data-Sector");
            var $selectedTds = $("#Sector-table tr.selected td").not(".radios");
            var tdLen = $selectedTds.length;

            var $formInputs = $("#SectorModal form").find(":input");

            var frmInpLen = $formInputs.length;
            for (var i = 0; i < frmInpLen; i++) {
                var $currInput = $($formInputs[i]);
                for (var j = 0; j < tdLen; j++) {
                    var $currTD = $($selectedTds[j]);
                    if ($currTD.data("property") == $currInput.attr("name") && $currTD.data("property") != "id_pk" && $currTD.data("property") != "Area") {
                        $currInput.val("");
                    }
                }
            }
        });
        $selRowContainer.append("<div id='crm-edit-Sector' class='crm-table-btn'><button type='button' class='btn btn-default'>Edit</button></div>");

        $("#crm-edit-Sector").bind("click", function () {
            if (selectedId != null) {
                $("#id_pk-text").prop("readonly", true);
                $("#sectorModalLabel").text("Edit Sector Levels");
                $("#save-Sector-changes").attr("data-Sector", selectedId);
                var $selectedTds = $("#Sector-table tr.selected td").not(".radios");
                var tdLen = $selectedTds.length;

                var $formInputs = $("#SectorModal form").find(":input");

                var frmInpLen = $formInputs.length;
                for (var i = 0; i < frmInpLen; i++) {
                    var $currInput = $($formInputs[i]);
                    for (var j = 0; j < tdLen; j++) {
                        var $currTD = $($selectedTds[j]);
                        if ($currTD.data("property") == $currInput.attr("name")) {
                            $currInput.val($currTD.html());
                        }
                    }
                }
                $('.selectpicker').selectpicker('refresh');
                $("#save-Sector-changes").attr("data-Sector", selectedId);
                $("#SectorModal").appendTo("body").modal("show").draggable();
            }
            else
                triggerAlert("You have to select a row to edit first.", "info");
        });
        $selRowContainer.append("<div id='delete-Sector-button' class='crm-table-btn'><button type='button' class='btn btn-danger'>Delete</button></div>");
        $("#delete-Sector-button").bind("click", function () {
            bootbox.dialog({
                title: 'Do you want to delete?',
                className: "crm-delete-confirm",
                message: "You are about to delete the selected Sector, are you sure you want to delete it?",
                buttons: {
                    'cancel': {
                        label: 'Cancel',
                        className: 'btn-default'
                    },
                    'yes': {
                        label: 'Yes',
                        className: 'btn-danger pull-right',
                        callback: function () {
                            $.ajax({
                                "url": serverPrefix + "Sector/DeleteSector/",
                                "type": "POST",
                                "data": {
                                    "id_pk": selectedId,
                                },
                                "success": function (data) {
                                    if (data > 0) {
                                        updateDataTable();
                                        triggerAlert("Successfully deleted row", "success");
                                    }
                                    else {
                                        triggerAlert("Something went wrong when trying to delete this row", "warning");
                                    }
                                }
                            });
                        }
                    },
                    'no': {
                        label: 'No',
                        className: 'pull-right',
                    }
                },
            });
        });
        drawButtonsExtension($selRowContainer);
    }

    var triggerAlert = function (msg, priorty) {
        $(document).trigger("clear-alerts");
        $(document).trigger("add-alerts", [
          {
              'message': msg,
              'priority': priorty
          }
        ]);
    }

    var drawCallBack = function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {

        var i = 0, j = 0;
        var insertValue;
        var StateSelId = StateCookie.getCurrentSite().selectedId;
        var rowArea = StateCookie.getCurrentSite().area;
        for (var name in aData) {

            var i = 0;
            var insertValue;

            for (var name in aData) {
                var $td;


                if (i == 0) {
                    $td = $('td:eq(' + i + ')', nRow);

                    $td.parent().click(function () {

                        selectRow(this.firstChild);

                    });
                    $td.html("<input type='radio' value=" + aData["_ID_PK"] + " name='selected-contact' onClick=''/>");
                    $td.addClass("radios");
                    if ($td.find("input").val() == StateSelId && rowArea == aData["Area"]) {
                        selectRow($td);
                    }
                    else if ($td.find("input").val() != selectedId) {
                        $td.parent().removeClass("selected");
                    }
                    i++;
                }

                if (name != "_ID_PK") {
                    if (i < 10) {
                        $td = $('td:eq(' + i + ')', nRow);
                        $td.attr("data-property", name);
                        $td.html(aData[name]);
                    }

                    i++;
                }
            }
        }
    }

    $('document').ready(function () {

        $('#Sector-table').DataTable({
            "destroy": true,
            "processing": true,
            "ajax": {
                "url": serverPrefix + "Sector/SectorJsonData/",
            },
            "initComplete": function (settings, json) {
                handleStates();
                drawButtons();
            },
            "defaultContent": "",
            //"iDisplayLength": Math.ceil(($("#page-content-wrapper").height() / 60)),
            "order": [[1, "asc"]],
            "columns": [@Html.Raw(DataObject)],
            "columnDefs": [
                {
                    "data": null,
                    "defaultContent": "",
                    "targets": 0
                }
            ],
            "lengthMenu": [[100, 500, 1000, -1], [100, 500, 1000, "All"]],
            "scrollY": ($("#page-content-wrapper").height() - 170),
            "scrollX": true,
            "fnRowCallback": drawCallBack
        });
    });


</script>
